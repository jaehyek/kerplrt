LOCAL_CFLAGS	Android.mk	/^LOCAL_CFLAGS := -Wall$/;"	m
LOCAL_FORCE_STATIC_EXECUTABLE	Android.mk	/^LOCAL_FORCE_STATIC_EXECUTABLE := true$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE := plrprepare$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE := plrtest$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE := tr$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE:= tr$/;"	m
LOCAL_MODULE_PATH	Android.mk	/^LOCAL_MODULE_PATH := $(TARGET_ROOT_OUT_SBIN)$/;"	m
LOCAL_PATH	Android.mk	/^LOCAL_PATH:= $(call my-dir)$/;"	m
LOCAL_SRC_FILES	Android.mk	/^LOCAL_SRC_FILES := $(src_files) \\$/;"	m
LOCAL_STATIC_LIBRARIES	Android.mk	/^LOCAL_STATIC_LIBRARIES := libc libcutils libm$/;"	m
src_files	Android.mk	/^src_files := \\$/;"	m
EoB	plr_calibration.c	657;"	d	file:
EoD	plr_calibration.c	656;"	d	file:
EoF	plr_calibration.c	658;"	d	file:
MAX_TICK_RANK	plr_calibration.c	96;"	d	file:
ONE_GB	plr_calibration.c	639;"	d	file:
PRIVATE	plr_calibration.c	20;"	d	file:
PUBLIC	plr_calibration.c	21;"	d	file:
SJD_CALIBRATION_REQUSET_COUNT	plr_calibration.c	25;"	d	file:
SJD_NUM_OF_CNK_SIZE_TYPE	plr_calibration.c	24;"	d	file:
SJD_PAGE_SIZE_RANK	plr_calibration.c	387;"	d	file:
SJ_KB_2_SECTOR	plr_calibration.c	296;"	d	file:
UNIT_SECTOR_SIZE	plr_calibration.c	638;"	d	file:
_cached_write_count	plr_calibration.c	/^PRIVATE	int _cached_write_count;$/;"	v
_calib_request_count	plr_calibration.c	/^static uint _calib_request_count = SJD_CALIBRATION_REQUSET_COUNT;$/;"	v	file:
_get_cached_write_count	plr_calibration.c	/^PRIVATE int _get_cached_write_count(void)$/;"	f
_get_rank	plr_calibration.c	/^PRIVATE int _get_rank(u32 cnk_siz)$/;"	f
_get_record	plr_calibration.c	/^PRIVATE calib_record_s* _get_record(u32 cnk_siz)$/;"	f
_inc_cached_write_count	plr_calibration.c	/^PRIVATE void _inc_cached_write_count(void)$/;"	f
_last_calib_phase	plr_calibration.c	/^static processing_phase_e	_last_calib_phase =  -1;$/;"	v	file:
_print_tick_histogram_data	plr_calibration.c	/^PRIVATE void _print_tick_histogram_data(void)$/;"	f
_print_tick_raw_data	plr_calibration.c	/^PRIVATE void _print_tick_raw_data(void)$/;"	f
_record_distribution_data	plr_calibration.c	/^PRIVATE void _record_distribution_data(s32 cnk_siz, tick_s* t)$/;"	f
_record_ticks_raw_data	plr_calibration.c	/^PRIVATE void _record_ticks_raw_data(s32 cnk_siz, tick_s* t)$/;"	f
_reset_cached_write_count	plr_calibration.c	/^PRIVATE void _reset_cached_write_count(void)$/;"	f
_written_size_before_flush	plr_calibration.c	/^PRIVATE uint _written_size_before_flush;$/;"	v
average	plr_calibration.c	/^	tick_s	average;$/;"	m	struct:__anon1	file:
calib_add_cached_write_data_size	plr_calibration.c	/^PUBLIC void calib_add_cached_write_data_size(int data_size)$/;"	f
calib_calc_ticks_min_max	plr_calibration.c	/^PUBLIC void calib_calc_ticks_min_max(s32 cnk_siz, tick_s* ticks)$/;"	f
calib_generate_internal_po_time	plr_calibration.c	/^PUBLIC int calib_generate_internal_po_time(u32 size)$/;"	f
calib_get_cached_write_size_before_flush	plr_calibration.c	/^PUBLIC uint calib_get_cached_write_size_before_flush(void)$/;"	f
calib_get_last_calib_phase	plr_calibration.c	/^PUBLIC processing_phase_e calib_get_last_calib_phase(void)$/;"	f
calib_init	plr_calibration.c	/^PUBLIC void calib_init(void)$/;"	f
calib_make_table	plr_calibration.c	/^PUBLIC int calib_make_table(void)$/;"	f
calib_print_table	plr_calibration.c	/^PUBLIC void calib_print_table(void)$/;"	f
calib_record_s	plr_calibration.c	/^} calib_record_s;$/;"	t	typeref:struct:__anon1	file:
calib_reset_cached_write_data_size	plr_calibration.c	/^PUBLIC void calib_reset_cached_write_data_size(void)$/;"	f
calib_s	plr_calibration.c	/^}calib_s;$/;"	t	typeref:struct:__anon2	file:
calib_set_last_calib_phase	plr_calibration.c	/^PUBLIC void calib_set_last_calib_phase(processing_phase_e phase)$/;"	f
calib_table	plr_calibration.c	/^PRIVATE calib_record_s calib_table[SJD_NUM_OF_CNK_SIZE_TYPE];$/;"	v
calib_write_request	plr_calibration.c	/^PUBLIC int calib_write_request(uchar * buf, u32 req_start, u32 req_len, u32 req_seq_num, u32 next_start_sector)$/;"	f
chunk_s	plr_calibration.c	/^} chunk_s;$/;"	t	typeref:struct:__anon3	file:
cnk_siz	plr_calibration.c	/^	s32		cnk_siz;			\/\/ 8 * 2^rank = 8, 16, 32, ...$/;"	m	struct:__anon1	file:
curr_rank	plr_calibration.c	/^	s32					curr_rank;$/;"	m	struct:__anon2	file:
dist	plr_calibration.c	/^PRIVATE s32 dist(s32 x, s32 m)$/;"	f
dist_record	plr_calibration.c	/^static u32 dist_record[SJD_NUM_OF_CNK_SIZE_TYPE][3][MAX_TICK_RANK]; \/\/ 3 counts eod, eob and eof$/;"	v	file:
length	plr_calibration.c	/^	u32 length;										\/\/ chunk length in sectors$/;"	m	struct:__anon3	file:
max_eob	plr_calibration.c	/^	tick_s	max_eob;			\/\/ ... BUSY	$/;"	m	struct:__anon1	file:
max_eod	plr_calibration.c	/^	tick_s	max_eod;			\/\/ maximum of End of DMA$/;"	m	struct:__anon1	file:
max_eof	plr_calibration.c	/^	tick_s	max_eof;			\/\/ ... CACHE FLUSH$/;"	m	struct:__anon1	file:
min_eob	plr_calibration.c	/^	tick_s	min_eob;			\/\/ ... BUSY$/;"	m	struct:__anon1	file:
min_eod	plr_calibration.c	/^	tick_s	min_eod;			\/\/ minimum of End of DMA$/;"	m	struct:__anon1	file:
min_eof	plr_calibration.c	/^	tick_s	min_eof;			\/\/ ... CACHE FLUSH$/;"	m	struct:__anon1	file:
num_try	plr_calibration.c	/^	s32		num_try;			\/\/ # of sampling$/;"	m	struct:__anon1	file:
rank	plr_calibration.c	/^	s32		rank;				\/\/ 0, 1, 2, ...$/;"	m	struct:__anon1	file:
record	plr_calibration.c	/^	calib_record_s		*record;$/;"	m	struct:__anon2	file:
send_internal_calibration_info	plr_calibration.c	/^PUBLIC int send_internal_calibration_info(int action, bool cal_test_enable) \/\/@sj 150709, action as a parameter$/;"	f
start	plr_calibration.c	/^	u32 start; 										\/\/ chunk start sector index		$/;"	m	struct:__anon3	file:
ticks_raw_data	plr_calibration.c	/^PRIVATE tick_s** ticks_raw_data;$/;"	v
total	plr_calibration.c	/^	tick_s	total;$/;"	m	struct:__anon1	file:
_PLR_CALIBRATION_H_	plr_calibration.h	18;"	d
eob	plr_calibration.h	/^	s32 					eob;					\/\/ tick for End of BUSY$/;"	m	struct:__anon4
eod	plr_calibration.h	/^	s32						eod;					\/\/ tick for End of DMA$/;"	m	struct:__anon4
eof	plr_calibration.h	/^	s32 					eof;					\/\/ tick for End of CACHE FLUSH$/;"	m	struct:__anon4
tick_s	plr_calibration.h	/^} tick_s;$/;"	t	typeref:struct:__anon4
g_test_info	plr_case_info.c	/^struct CASE_INFO g_test_info;$/;"	v	typeref:struct:CASE_INFO
get_first_sector_in_test_area	plr_case_info.c	/^uint get_first_sector_in_test_area(void)$/;"	f
get_first_sector_in_zone	plr_case_info.c	/^uint get_first_sector_in_zone(uint zone_num)$/;"	f
get_index_in_chunk_arr	plr_case_info.c	/^int get_index_in_chunk_arr(uint sectors)$/;"	f
get_last_sector_in_test_area	plr_case_info.c	/^uint get_last_sector_in_test_area(void)$/;"	f
get_last_sector_in_zone	plr_case_info.c	/^uint get_last_sector_in_zone(uint zone_num)$/;"	f
get_pages_in_chunk	plr_case_info.c	/^uint get_pages_in_chunk(uint index)$/;"	f
get_pages_in_zone	plr_case_info.c	/^uint get_pages_in_zone(void)$/;"	f
get_reserved_sectors_in_zone	plr_case_info.c	/^uint get_reserved_sectors_in_zone(void)$/;"	f
get_sectors_in_chunk	plr_case_info.c	/^uint get_sectors_in_chunk(uint index)$/;"	f
get_sectors_in_zone	plr_case_info.c	/^uint get_sectors_in_zone(void)$/;"	f
get_test_pages_in_zone	plr_case_info.c	/^uint get_test_pages_in_zone(void)$/;"	f
get_test_sectors_in_zone	plr_case_info.c	/^uint get_test_sectors_in_zone(void)$/;"	f
get_total_chunk_type	plr_case_info.c	/^uint get_total_chunk_type(void)$/;"	f
get_total_pgs_in_chunk_arr	plr_case_info.c	/^uint get_total_pgs_in_chunk_arr(void)$/;"	f
get_total_sectors_in_chunk_arr	plr_case_info.c	/^uint get_total_sectors_in_chunk_arr(void)$/;"	f
get_total_zone	plr_case_info.c	/^uint get_total_zone(void)$/;"	f
get_zone_num	plr_case_info.c	/^uint get_zone_num(uint sector_addr)$/;"	f
init_case_info	plr_case_info.c	/^void init_case_info(uint test_first_sector, uint test_sector_length)$/;"	f
print_case_info	plr_case_info.c	/^void print_case_info(void)$/;"	f
set_chunk_info	plr_case_info.c	/^int set_chunk_info(uint *array_chunk, uint num_of_chunk_type){$/;"	f
set_test_sectors_in_zone	plr_case_info.c	/^void set_test_sectors_in_zone(uint test_sectors_in_zone)$/;"	f
CASE_INFO	plr_case_info.h	/^struct CASE_INFO$/;"	s
NUM_OF_SECTORS_PER_8MB	plr_case_info.h	13;"	d
ZONE_SIZE_X_BYTE	plr_case_info.h	8;"	d
ZONE_SIZE_X_PAGE	plr_case_info.h	11;"	d
ZONE_SIZE_X_SECTOR	plr_case_info.h	9;"	d
ZONE_SIZE_X_SECTOR_MASK	plr_case_info.h	10;"	d
__PLR_CASE_INFO__	plr_case_info.h	2;"	d
first_sector	plr_case_info.h	/^	uint first_sector;$/;"	m	struct:CASE_INFO
last_sector	plr_case_info.h	/^	uint last_sector;$/;"	m	struct:CASE_INFO
p_sectors_each_chunk	plr_case_info.h	/^	uint *p_sectors_each_chunk;		$/;"	m	struct:CASE_INFO
reserved_sectors_in_zone	plr_case_info.h	/^	uint reserved_sectors_in_zone;$/;"	m	struct:CASE_INFO
sectors_per_zone	plr_case_info.h	/^	uint sectors_per_zone;$/;"	m	struct:CASE_INFO
test_sectors_in_zone	plr_case_info.h	/^	uint test_sectors_in_zone;$/;"	m	struct:CASE_INFO
total_chunk_type	plr_case_info.h	/^	uint total_chunk_type;$/;"	m	struct:CASE_INFO
total_sectors_chunk_arr	plr_case_info.h	/^	uint total_sectors_chunk_arr;$/;"	m	struct:CASE_INFO
total_zone_num	plr_case_info.h	/^	uint total_zone_num;	$/;"	m	struct:CASE_INFO
MMC_PACKED_ADD	plr_common.c	/^	MMC_PACKED_ADD = 1,$/;"	e	enum:mmc_packed_prepare	file:
MMC_PACKED_BLOCKS_FULL	plr_common.c	/^	MMC_PACKED_BLOCKS_FULL,$/;"	e	enum:mmc_packed_prepare	file:
MMC_PACKED_BLOCKS_OVER	plr_common.c	/^	MMC_PACKED_BLOCKS_OVER,$/;"	e	enum:mmc_packed_prepare	file:
MMC_PACKED_CHANGE	plr_common.c	/^	MMC_PACKED_CHANGE,$/;"	e	enum:mmc_packed_prepare	file:
MMC_PACKED_COUNT_FULL	plr_common.c	/^	MMC_PACKED_COUNT_FULL,$/;"	e	enum:mmc_packed_prepare	file:
MMC_PACKED_INVALID	plr_common.c	/^	MMC_PACKED_INVALID, $/;"	e	enum:mmc_packed_prepare	file:
MMC_PACKED_NONE	plr_common.c	/^	MMC_PACKED_NONE = 0,$/;"	e	enum:mmc_packed_cmd	file:
MMC_PACKED_PASS	plr_common.c	/^	MMC_PACKED_PASS,$/;"	e	enum:mmc_packed_prepare	file:
MMC_PACKED_READ	plr_common.c	/^	MMC_PACKED_READ,$/;"	e	enum:mmc_packed_cmd	file:
MMC_PACKED_WRITE	plr_common.c	/^	MMC_PACKED_WRITE,$/;"	e	enum:mmc_packed_cmd	file:
MMC_PACKED_WR_HDR	plr_common.c	/^	MMC_PACKED_WR_HDR,$/;"	e	enum:mmc_packed_cmd	file:
PON_LONG	plr_common.c	23;"	d	file:
PON_ON	plr_common.c	21;"	d	file:
PON_SHORT	plr_common.c	22;"	d	file:
_strspn	plr_common.c	/^uint _strspn(const char *s, const char *accept)$/;"	f
awake_request	plr_common.c	/^static int awake_request(void)$/;"	f	file:
display_date	plr_common.c	/^void display_date(void)$/;"	f
erase_data_pages	plr_common.c	/^static int erase_data_pages(uint req_start, uint req_len, uint req_seq_num)$/;"	f	file:
erase_request	plr_common.c	/^int erase_request(uint req_start, uint req_len, uint req_seq_num)$/;"	f
extend_feature_request	plr_common.c	/^static int  extend_feature_request(uint lsn)$/;"	f	file:
feature_enable	plr_common.c	/^static int feature_enable(void)$/;"	f	file:
flush_all	plr_common.c	/^static int flush_all(void)$/;"	f	file:
g_erase_type	plr_common.c	/^static erase_type_e g_erase_type = TYPE_ERASE;$/;"	v	file:
g_last_packed_sector	plr_common.c	/^static uint g_last_packed_sector = 0;$/;"	v	file:
g_packed_buf_offset	plr_common.c	/^static uint g_packed_buf_offset = 0;$/;"	v	file:
get_erase_test_type	plr_common.c	/^int get_erase_test_type(void)$/;"	f
get_last_packed_sector	plr_common.c	/^uint get_last_packed_sector(void)$/;"	f
get_power_loss_time	plr_common.c	/^uint get_power_loss_time(void)$/;"	f
get_poweroff_value	plr_common.c	/^static u64 get_poweroff_value(poweroff_info_t *poff_info, uint req_len, int option)$/;"	f	file:
get_poweroff_value_for_delay	plr_common.c	/^static u64 get_poweroff_value_for_delay(processing_phase_e poff_phase, uint req_len, int option)$/;"	f	file:
get_poweroff_value_for_timing	plr_common.c	/^static u64 get_poweroff_value_for_timing(processing_phase_e poff_phase, uint req_len, int option)$/;"	f	file:
is_digit	plr_common.c	/^static bool is_digit(char ch)$/;"	f	file:
is_numeric	plr_common.c	/^bool is_numeric(const char * cp)$/;"	f
is_xdigit_lower	plr_common.c	/^static bool is_xdigit_lower(char ch)$/;"	f	file:
is_xdigit_upper	plr_common.c	/^static bool is_xdigit_upper(char ch)$/;"	f	file:
make_header	plr_common.c	/^static void make_header(uchar *buf, uint req_seq_num, uint req_start, uint req_len, uint page_index, uint next_start_sector, bool is_commit_pg)$/;"	f	file:
make_header_data	plr_common.c	/^static void make_header_data(uchar * buf, uint req_start, uint req_len, uint req_seq_num, uint next_start_sector, bool is_commit)$/;"	f	file:
mmc_packed_cmd	plr_common.c	/^enum mmc_packed_cmd {$/;"	g	file:
mmc_packed_prepare	plr_common.c	/^enum mmc_packed_prepare {$/;"	g	file:
op_condition_request	plr_common.c	/^static int op_condition_request(void)$/;"	f	file:
packed_flush	plr_common.c	/^int packed_flush(void) $/;"	f
packed_send_list	plr_common.c	/^static int packed_send_list(uchar* buf, uint req_start, uint req_len, bool is_commit)$/;"	f	file:
plr_get_extra_buffer	plr_common.c	/^void* plr_get_extra_buffer(void)$/;"	f
plr_get_read_buffer	plr_common.c	/^void* plr_get_read_buffer(void)$/;"	f
plr_get_write_buffer	plr_common.c	/^void* plr_get_write_buffer(void)$/;"	f
plr_print_state_info	plr_common.c	/^void plr_print_state_info(void)$/;"	f
poff_notify_request	plr_common.c	/^static int poff_notify_request(void)$/;"	f	file:
poweroff_processing	plr_common.c	/^static processing_phase_e poweroff_processing(uint req_len, int option)$/;"	f	file:
print_head_info	plr_common.c	/^void print_head_info(struct plr_header *header)$/;"	f
random_ratio_poweroff_phase	plr_common.c	/^static processing_phase_e random_ratio_poweroff_phase(void)$/;"	f	file:
select_poweroff_phase	plr_common.c	/^static processing_phase_e select_poweroff_phase(poweroff_info_t *poff_info)$/;"	f	file:
select_poweroff_type	plr_common.c	/^static poweroff_type_e select_poweroff_type(processing_phase_e poff_phase)$/;"	f	file:
set_checked_addr	plr_common.c	/^void set_checked_addr(uint n_check_addr)$/;"	f
set_erase_test_type	plr_common.c	/^void set_erase_test_type(erase_type_e type)$/;"	f
set_loop_count	plr_common.c	/^void set_loop_count(uint n_loop_cnt)$/;"	f
set_poweroff_info	plr_common.c	/^void set_poweroff_info(void)$/;"	f
sleep_request	plr_common.c	/^static int sleep_request(void)$/;"	f	file:
strtoud	plr_common.c	/^uint strtoud(const char *cp)$/;"	f
util_file_basename	plr_common.c	/^char* util_file_basename(char* path)$/;"	f
write_data_pages	plr_common.c	/^static int write_data_pages(uchar * buf, uint req_start, uint req_len, uint req_seq_num, uint next_start_sector, bool is_commit_page)$/;"	f	file:
write_flush_request	plr_common.c	/^int write_flush_request(uchar * buf, uint req_start, uint req_len, uint req_seq_num, uint next_start_sector)$/;"	f
write_flush_request_for_calib	plr_common.c	/^int write_flush_request_for_calib(uchar * buf, uint req_start, uint req_len, uint req_seq_num, uint next_start_sector)$/;"	f
write_request	plr_common.c	/^int write_request(uchar * buf, uint req_start, uint req_len, uint req_seq_num, uint next_start_sector)$/;"	f
write_request_normal	plr_common.c	/^int write_request_normal(uchar * buf, uint req_start, uint req_len, uint req_seq_num, uint next_start_sector, bool is_commit)$/;"	f
write_request_packed	plr_common.c	/^static int write_request_packed(uchar* buf, uint req_start, uint req_len, uint req_seq_num, uint next_start_sector, bool is_commit)$/;"	f	file:
BKOPS_TEST	plr_common.h	135;"	d
DO_CACHE_FLUSH	plr_common.h	163;"	d
DO_PACKED_FLUSH	plr_common.h	164;"	d
ESC_COLOR_BLACK	plr_common.h	94;"	d
ESC_COLOR_BLUE	plr_common.h	98;"	d
ESC_COLOR_CYAN	plr_common.h	100;"	d
ESC_COLOR_GREEN	plr_common.h	96;"	d
ESC_COLOR_MAGENTA	plr_common.h	99;"	d
ESC_COLOR_NORMAL	plr_common.h	92;"	d
ESC_COLOR_RED	plr_common.h	95;"	d
ESC_COLOR_RESET	plr_common.h	93;"	d
ESC_COLOR_WHITE	plr_common.h	101;"	d
ESC_COLOR_YELLOW	plr_common.h	97;"	d
EXT_DEBUG_PRINT	plr_common.h	408;"	d
EXT_DEBUG_PRINT	plr_common.h	410;"	d
FLUSH_FREQUENCY	plr_common.h	66;"	d
HPI_TEST	plr_common.h	136;"	d
INTERNAL_POWEROFF_FLAG	plr_common.h	69;"	d
IS_AGING_TEST	plr_common.h	123;"	d
IS_BKOPS_TEST	plr_common.h	141;"	d
IS_CACHEOFF_TEST	plr_common.h	130;"	d
IS_CACHEON_TEST	plr_common.h	131;"	d
IS_DRIVER_TEST	plr_common.h	119;"	d
IS_EXTERNAL_TEST	plr_common.h	125;"	d
IS_HPI_TEST	plr_common.h	142;"	d
IS_INTERNAL_TEST	plr_common.h	126;"	d
IS_NORMAL_AGING_TEST	plr_common.h	128;"	d
IS_OPCON_TEST	plr_common.h	144;"	d
IS_PON_TEST	plr_common.h	143;"	d
IS_POWERLOSS_TEST	plr_common.h	122;"	d
IS_RETENTION_TEST	plr_common.h	127;"	d
IS_SLEEP_N_AWAKE_TEST	plr_common.h	140;"	d
IS_SYSTEM_TEST	plr_common.h	120;"	d
IS_USER_DEFINED_TEST	plr_common.h	132;"	d
MAGIC_NUMBER	plr_common.h	64;"	d
MAGIC_NUMBER_FLUSH	plr_common.h	65;"	d
MAX	plr_common.h	150;"	d
MAXPATH	plr_common.h	402;"	d
MAX_FILES	plr_common.h	90;"	d
MAX_PAGE_OF_READ_CHUNK	plr_common.h	62;"	d
MIN	plr_common.h	147;"	d
NUM_OF_SECTORS_PER_PAGE	plr_common.h	59;"	d
NUM_OF_SECTORS_PER_READ_CHUNK	plr_common.h	60;"	d
OPCON_TEST	plr_common.h	138;"	d
PAGES_TO_SECTORS	plr_common.h	52;"	d
PAGE_SIZE	plr_common.h	47;"	d
PLR_CALIBRATION_TEST_IEROA	plr_common.h	24;"	d
PLR_CURRENT_MONITOR	plr_common.h	28;"	d
PLR_LMP_SPI	plr_common.h	31;"	d
PLR_S5C5410_USI	plr_common.h	34;"	d
PLR_TFTP_FW_UP	plr_common.h	21;"	d
PLR_VERSION	plr_common.h	42;"	d
PON_TEST	plr_common.h	137;"	d
READ_CHUNK_SIZE	plr_common.h	57;"	d
SAVE_EXTRA_INFO_SECTOR_NUM	plr_common.h	72;"	d
SAVE_HISTORY_INFO_SECTOR_NUM	plr_common.h	73;"	d
SAVE_HISTORY_REQUEST_INFO_SECTOR_NUM	plr_common.h	74;"	d
SAVE_VERIFY_RESULT_SECTOR_NUM	plr_common.h	71;"	d
SECTORS_TO_PAGES	plr_common.h	53;"	d
SECTORS_TO_SIZE_GB	plr_common.h	51;"	d
SECTORS_TO_SIZE_KB	plr_common.h	50;"	d
SECTOR_SIZE	plr_common.h	44;"	d
SIZE_B_TO_SECTORS	plr_common.h	54;"	d
SJD_ASSERT	plr_common.h	381;"	d
SJD_ASSERT	plr_common.h	398;"	d
SJD_CALIBRATION_MODE	plr_common.h	362;"	d
SJD_CALIBRATION_MODE	plr_common.h	394;"	d
SJD_DEBUG_PRINTF	plr_common.h	353;"	d
SJD_DEBUG_PRINTF	plr_common.h	392;"	d
SJD_FUNCTION_ENTER	plr_common.h	371;"	d
SJD_FUNCTION_ENTER	plr_common.h	396;"	d
SJD_FUNCTION_EXIT	plr_common.h	374;"	d
SJD_FUNCTION_EXIT	plr_common.h	397;"	d
SJD_INTERNAL_POWER_CONTROL_MODE	plr_common.h	366;"	d
SJD_INTERNAL_POWER_CONTROL_MODE	plr_common.h	395;"	d
SJD_TRACE	plr_common.h	377;"	d
SJD_WARNING_PRINTF	plr_common.h	358;"	d
SJD_WARNING_PRINTF	plr_common.h	393;"	d
SLEEP_N_AWAKE_TEST	plr_common.h	134;"	d
TYPE_DISCARD	plr_common.h	/^	TYPE_DISCARD,$/;"	e	enum:__anon8
TYPE_ERASE	plr_common.h	/^	TYPE_ERASE,$/;"	e	enum:__anon8
TYPE_SANITIZE	plr_common.h	/^	TYPE_SANITIZE$/;"	e	enum:__anon8
TYPE_TRIM	plr_common.h	/^	TYPE_TRIM,$/;"	e	enum:__anon8
_PLR_COMMON_H_	plr_common.h	13;"	d
b_cache_enable	plr_common.h	/^	bool b_cache_enable;$/;"	m	struct:plr_state
b_calibration_test	plr_common.h	/^	bool b_calibration_test;$/;"	m	struct:plr_state
b_commit_err_cnt_enable	plr_common.h	/^	bool b_commit_err_cnt_enable;	$/;"	m	struct:plr_state
b_current_accumulating	plr_common.h	/^	bool b_current_accumulating;		\/\/ edward$/;"	m	struct:plr_state
b_current_monitoring	plr_common.h	/^	bool b_current_monitoring;		$/;"	m	struct:plr_state
b_finish_condition	plr_common.h	/^	bool b_finish_condition;$/;"	m	struct:plr_state
b_first_commit	plr_common.h	/^	bool b_first_commit;			\/\/ power off after writing first commit pages. \/\/ieroa$/;"	m	struct:plr_state
b_packed_enable	plr_common.h	/^	bool b_packed_enable;$/;"	m	struct:plr_state
b_statistics_monitoring	plr_common.h	/^	bool b_statistics_monitoring;		\/\/ edward$/;"	m	struct:plr_state
boot_cnt	plr_common.h	/^	uint boot_cnt;					\/\/ booting count $/;"	m	struct:plr_header
boot_cnt	plr_common.h	/^	uint boot_cnt;					\/\/ booting count$/;"	m	struct:plr_state
boot_count	plr_common.h	/^	uint boot_count;$/;"	m	struct:plr_write_info
cache_flush_cycle	plr_common.h	/^	uint cache_flush_cycle;$/;"	m	struct:plr_state
checked_addr	plr_common.h	/^	uint checked_addr;				\/\/ address that applicatoin sent$/;"	m	struct:plr_state
chunk_size	plr_common.h	/^	struct plr_chunk_size chunk_size;$/;"	m	struct:plr_state	typeref:struct:plr_state::plr_chunk_size
commit_err_cnt	plr_common.h	/^	uint commit_err_cnt;		 	$/;"	m	struct:plr_state
commit_seq_num	plr_common.h	/^		uint commit_seq_num;$/;"	m	union:plr_req_info::__anon5
crc_checksum	plr_common.h	/^	uint crc_checksum;				\/\/ crc_checksum of 36 bytes (from magic_number to next_start_sector)$/;"	m	struct:plr_header
date_info	plr_common.h	/^	uchar date_info[14];				\/\/ date information$/;"	m	struct:plr_state
erase_type_e	plr_common.h	/^} erase_type_e;$/;"	t	typeref:enum:__anon8
event1_cnt	plr_common.h	/^	uint event1_cnt;				\/\/ event1 count $/;"	m	struct:plr_state
event1_type	plr_common.h	/^	uint event1_type;               \/\/ event1 type $/;"	m	struct:plr_state
event2_cnt	plr_common.h	/^	uint event2_cnt;				\/\/ event2 count$/;"	m	struct:plr_state
event2_type	plr_common.h	/^	uint event2_type;				\/\/ event2 type $/;"	m	struct:plr_state
extend_feature	plr_common.h	/^	uint extend_feature;$/;"	m	struct:plr_state
filled_data	plr_common.h	/^	struct plr_filled_data filled_data;$/;"	m	struct:plr_state	typeref:struct:plr_state::plr_filled_data
finish	plr_common.h	/^	struct plr_finish_condition finish;$/;"	m	struct:plr_state	typeref:struct:plr_state::plr_finish_condition
internal_poweroff_type	plr_common.h	/^	bool internal_poweroff_type;		\/\/ power off by gpio control$/;"	m	struct:plr_state
last_flush_pos	plr_common.h	/^	uint last_flush_pos;$/;"	m	struct:plr_state
loop_cnt	plr_common.h	/^	uint loop_cnt;					\/\/ loop count $/;"	m	struct:plr_header
loop_cnt	plr_common.h	/^	uint loop_cnt;					\/\/ loop count that applicatoin sent$/;"	m	struct:plr_state
loop_count	plr_common.h	/^	uint loop_count;$/;"	m	struct:plr_write_info
lsn	plr_common.h	/^	uint lsn;						\/\/ logical sector number$/;"	m	struct:plr_header
lsn	plr_common.h	/^	uint lsn;$/;"	m	struct:plr_write_info
magic_number	plr_common.h	/^	uint magic_number;				\/\/ magic number "0xFFEF0815"$/;"	m	struct:plr_header
mdelay	plr_common.h	160;"	d
next_start_sector	plr_common.h	/^	uint next_start_sector;			\/\/ start sector address of next request$/;"	m	struct:plr_header
packed_flush_cycle	plr_common.h	/^	uint packed_flush_cycle;$/;"	m	struct:plr_state
page_index	plr_common.h	/^	uint page_index;			\/\/ page index $/;"	m	struct:plr_req_info
page_num	plr_common.h	/^	uint page_num;				\/\/ number of pages in request$/;"	m	struct:plr_req_info
pl_info	plr_common.h	/^	struct plr_internal_pl pl_info;$/;"	m	struct:plr_state	typeref:struct:plr_state::plr_internal_pl
pl_time_max	plr_common.h	/^	uint pl_time_max;$/;"	m	struct:plr_internal_pl
pl_time_min	plr_common.h	/^	uint pl_time_min;$/;"	m	struct:plr_internal_pl
pl_time_writing	plr_common.h	/^	uint pl_time_writing;$/;"	m	struct:plr_internal_pl
plr_chunk_size	plr_common.h	/^struct plr_chunk_size {$/;"	s
plr_debug	plr_common.h	154;"	d
plr_debug	plr_common.h	156;"	d
plr_err	plr_common.h	107;"	d
plr_err	plr_common.h	114;"	d
plr_filled_data	plr_common.h	/^struct plr_filled_data {$/;"	s
plr_finish_condition	plr_common.h	/^struct plr_finish_condition {$/;"	s
plr_header	plr_common.h	/^struct plr_header {$/;"	s
plr_info	plr_common.h	105;"	d
plr_info	plr_common.h	112;"	d
plr_info_highlight	plr_common.h	106;"	d
plr_info_highlight	plr_common.h	113;"	d
plr_internal_pl	plr_common.h	/^struct plr_internal_pl {$/;"	s
plr_ping	plr_common.h	108;"	d
plr_ping	plr_common.h	115;"	d
plr_req_info	plr_common.h	/^struct plr_req_info {$/;"	s
plr_state	plr_common.h	/^struct plr_state {$/;"	s
plr_write_info	plr_common.h	/^struct plr_write_info$/;"	s
poweroff_pos	plr_common.h	/^	uint poweroff_pos;			$/;"	m	struct:plr_state
print_crash_only	plr_common.h	/^	bool print_crash_only;$/;"	m	struct:plr_state
random_seed	plr_common.h	/^	uint random_seed;$/;"	m	struct:plr_write_info
ratio_of_4kb	plr_common.h	/^		uint ratio_of_4kb; 			$/;"	m	union:plr_chunk_size::__anon6
ratio_of_64kb_over	plr_common.h	/^	uint ratio_of_64kb_over; 				$/;"	m	struct:plr_chunk_size
ratio_of_8kb_64kb	plr_common.h	/^		uint ratio_of_8kb_64kb; 			$/;"	m	union:plr_chunk_size::__anon7
ratio_of_filled	plr_common.h	/^	uint ratio_of_filled;$/;"	m	struct:plr_state
req_info	plr_common.h	/^	struct plr_req_info req_info;	\/\/ request information$/;"	m	struct:plr_header	typeref:struct:plr_header::plr_req_info
req_len	plr_common.h	/^		uint req_len;$/;"	m	union:plr_chunk_size::__anon6
req_seq_num	plr_common.h	/^		uint req_seq_num;		\/\/ request sequential number after booting process$/;"	m	union:plr_req_info::__anon5
request_sectors	plr_common.h	/^	uint request_sectors;$/;"	m	struct:plr_write_info
reserved	plr_common.h	/^	uint reserved;	$/;"	m	struct:plr_state
reserved1	plr_common.h	/^	uint reserved1;	$/;"	m	struct:plr_header
reserved2	plr_common.h	/^	uint reserved2;$/;"	m	struct:plr_header
skip_size	plr_common.h	/^		uint skip_size;$/;"	m	union:plr_chunk_size::__anon7
start_sector	plr_common.h	/^	uint start_sector;			\/\/ request start sector address$/;"	m	struct:plr_req_info
stderr	plr_common.h	87;"	d
stdin	plr_common.h	79;"	d
stdout	plr_common.h	83;"	d
test_minor	plr_common.h	/^	uint test_minor; 				\/\/ minor_version$/;"	m	struct:plr_state
test_name	plr_common.h	/^	uchar test_name[16];			\/\/ test name$/;"	m	struct:plr_state
test_num	plr_common.h	/^	uint test_num;					\/\/ test number$/;"	m	struct:plr_state
test_sector_length	plr_common.h	/^	uint test_sector_length;		\/\/ length of test area (sectors)$/;"	m	struct:plr_state
test_start_sector	plr_common.h	/^	uint test_start_sector;			\/\/ start sector address of test area$/;"	m	struct:plr_state
test_type1	plr_common.h	/^	uchar test_type1;				\/\/ D : Driver Test F : File System Test$/;"	m	struct:plr_state
test_type2	plr_common.h	/^	uchar test_type2;				\/\/ P : Powerloss Test A : Aging Test$/;"	m	struct:plr_state
test_type3	plr_common.h	/^	uchar test_type3;				\/\/ E : External I : Internal V : Aging Retention$/;"	m	struct:plr_state
test_type4	plr_common.h	/^	uchar test_type4;				\/\/ C : Cache On 0 : Cache Off$/;"	m	struct:plr_state
total_device_sector	plr_common.h	/^	uint total_device_sector; $/;"	m	struct:plr_state
type	plr_common.h	/^	uint type;				\/\/ 0 : CKBD 1 : ICKBD 2 : RANDOM 3 : USER$/;"	m	struct:plr_filled_data
type	plr_common.h	/^	uint type;				\/\/ 0 : Fixed 1 : Random$/;"	m	struct:plr_chunk_size
type	plr_common.h	/^	uint type;				\/\/ 0 : Power Off Count 1 : Written Data Size$/;"	m	struct:plr_finish_condition
user_defined_option	plr_common.h	/^	char user_defined_option[3][20];$/;"	m	struct:plr_state
value	plr_common.h	/^	uint value; 			$/;"	m	struct:plr_filled_data
value	plr_common.h	/^	uint value; 			\/\/ Power Off Count or Written Data Size (GB)$/;"	m	struct:plr_finish_condition
write_info	plr_common.h	/^	struct plr_write_info write_info;$/;"	m	struct:plr_state	typeref:struct:plr_state::plr_write_info
RWRETRY	plr_deviceio.c	17;"	d	file:
dd_awake	plr_deviceio.c	/^int dd_awake(void)$/;"	f
dd_bkops_test_enable	plr_deviceio.c	/^int dd_bkops_test_enable(int b_enable)$/;"	f
dd_cache_ctrl	plr_deviceio.c	/^int dd_cache_ctrl(uint enable)$/;"	f
dd_cache_flush	plr_deviceio.c	/^int dd_cache_flush(void)$/;"	f
dd_erase	plr_deviceio.c	/^int dd_erase(uint start_sector, uint len) $/;"	f
dd_erase_for_poff	plr_deviceio.c	/^int dd_erase_for_poff(uint start_sector, uint len, int type)$/;"	f
dd_get_packed_max_sectors	plr_deviceio.c	/^int dd_get_packed_max_sectors(int rw)$/;"	f
dd_hpi_test_enable	plr_deviceio.c	/^int dd_hpi_test_enable(int b_enable)$/;"	f
dd_init_awake	plr_deviceio.c	/^int dd_init_awake(void)$/;"	f
dd_internal_power_control	plr_deviceio.c	/^int dd_internal_power_control(int b_power)$/;"	f
dd_mmc_get_packed_count	plr_deviceio.c	/^int dd_mmc_get_packed_count(void)$/;"	f
dd_packed_add_list	plr_deviceio.c	/^int dd_packed_add_list(ulong start, lbaint_t blkcnt, void* src, int rw)$/;"	f
dd_packed_create_buff	plr_deviceio.c	/^void* dd_packed_create_buff(void *buff)$/;"	f
dd_packed_delete_buff	plr_deviceio.c	/^int dd_packed_delete_buff(void)$/;"	f
dd_packed_send_list	plr_deviceio.c	/^int dd_packed_send_list(void)$/;"	f
dd_poweroff_notify	plr_deviceio.c	/^int dd_poweroff_notify(int notify_type)$/;"	f
dd_read	plr_deviceio.c	/^int dd_read(uchar *data, uint start_sector, uint len)$/;"	f
dd_send_internal_info	plr_deviceio.c	/^int dd_send_internal_info(void * internal_info)$/;"	f
dd_sleep	plr_deviceio.c	/^int dd_sleep(void)$/;"	f
dd_suspend	plr_deviceio.c	/^int dd_suspend(int wake_time)$/;"	f
dd_write	plr_deviceio.c	/^int dd_write(uchar *data, uint start_sector, uint len)$/;"	f
get_dd_bkops_enable	plr_deviceio.c	/^int get_dd_bkops_enable(void)$/;"	f
get_dd_bkops_urgent_caused	plr_deviceio.c	/^int get_dd_bkops_urgent_caused(void)$/;"	f
get_dd_cache_enable	plr_deviceio.c	/^int get_dd_cache_enable(void)$/;"	f
get_dd_dirty_part_info	plr_deviceio.c	/^int get_dd_dirty_part_info(uint *start, uint *count)$/;"	f
get_dd_hpi_enable	plr_deviceio.c	/^int get_dd_hpi_enable(void)$/;"	f
get_dd_hpi_out_of_int_time	plr_deviceio.c	/^int get_dd_hpi_out_of_int_time(void)$/;"	f
get_dd_packed_enable	plr_deviceio.c	/^int get_dd_packed_enable(void)$/;"	f
get_dd_part_info	plr_deviceio.c	/^void get_dd_part_info(uint *start, uint *count)$/;"	f
get_dd_poweroff_notify_timeout	plr_deviceio.c	/^int get_dd_poweroff_notify_timeout(int notify_type)$/;"	f
get_dd_product_name	plr_deviceio.c	/^int get_dd_product_name(char *proc_name)$/;"	f
get_dd_s_a_timeout	plr_deviceio.c	/^int get_dd_s_a_timeout(void)$/;"	f
get_dd_total_sector_count	plr_deviceio.c	/^int get_dd_total_sector_count(void)$/;"	f
get_sdmmc_part_info	plr_deviceio.c	/^int get_sdmmc_part_info(uint *start, uint *count, uchar *pid)$/;"	f
sdmmc_read	plr_deviceio.c	/^int sdmmc_read(uchar *data, uint start_sector, uint len)$/;"	f
sdmmc_write	plr_deviceio.c	/^int sdmmc_write(uchar *data, uint start_sector, uint len)$/;"	f
_PLR_FLASHIO_H_	plr_deviceio.h	13;"	d
DEBUG_ERR_HANDLING	plr_err_handling.c	31;"	d	file:
PRINT_COMMAND	plr_err_handling.c	/^	PRINT_COMMAND = 0,$/;"	e	enum:PRINT_COMMAND_OPTION	file:
PRINT_COMMAND_OPTION	plr_err_handling.c	/^enum PRINT_COMMAND_OPTION$/;"	g	file:
PRINT_OPTION_BOOT	plr_err_handling.c	/^	PRINT_OPTION_BOOT,$/;"	e	enum:PRINT_COMMAND_OPTION	file:
PRINT_OPTION_COUNT	plr_err_handling.c	/^	PRINT_OPTION_COUNT,$/;"	e	enum:PRINT_COMMAND_OPTION	file:
PRINT_OPTION_CRASH	plr_err_handling.c	/^	PRINT_OPTION_CRASH,$/;"	e	enum:PRINT_COMMAND_OPTION	file:
PRINT_OPTION_HEADER	plr_err_handling.c	/^	PRINT_OPTION_HEADER,$/;"	e	enum:PRINT_COMMAND_OPTION	file:
PRINT_OPTION_LOOP	plr_err_handling.c	/^	PRINT_OPTION_LOOP,$/;"	e	enum:PRINT_COMMAND_OPTION	file:
PRINT_OPTION_LSN	plr_err_handling.c	/^	PRINT_OPTION_LSN,$/;"	e	enum:PRINT_COMMAND_OPTION	file:
PRINT_OPTION_MAX	plr_err_handling.c	/^	PRINT_OPTION_MAX,$/;"	e	enum:PRINT_COMMAND_OPTION	file:
PRINT_OPTION_TESTINFO	plr_err_handling.c	/^	PRINT_OPTION_TESTINFO,$/;"	e	enum:PRINT_COMMAND_OPTION	file:
clear_reset_cnt_sectors	plr_err_handling.c	/^int clear_reset_cnt_sectors(uint s_sector, uint sector_num)$/;"	f
clear_sdcard_sectors	plr_err_handling.c	/^int clear_sdcard_sectors(uint s_sector, uint sector_num)$/;"	f
clear_state_sdcard	plr_err_handling.c	/^int clear_state_sdcard(void)$/;"	f
clear_sw_reset_cnt	plr_err_handling.c	/^int clear_sw_reset_cnt(void)$/;"	f
get_crash_state_sdcard	plr_err_handling.c	/^int get_crash_state_sdcard(int *err_num)$/;"	f
get_sw_reset_cnt	plr_err_handling.c	/^int get_sw_reset_cnt(int *reset_cnt)$/;"	f
load_crash_dump	plr_err_handling.c	/^int load_crash_dump(void* buf, uint length_byte, uint start_location)$/;"	f
match_arg	plr_err_handling.c	/^static bool match_arg(char *args[], uint argc, char *argument, uint *ret_setup_value)$/;"	f	file:
plr_info_boot	plr_err_handling.c	24;"	d	file:
plr_info_loop	plr_err_handling.c	23;"	d	file:
plr_info_loopboot	plr_err_handling.c	22;"	d	file:
plr_print_help_message	plr_err_handling.c	/^static void plr_print_help_message(void)$/;"	f	file:
plr_print_log	plr_err_handling.c	/^int plr_print_log(bool show_crash_only)$/;"	f
plr_print_log_sector	plr_err_handling.c	/^int plr_print_log_sector(uint lsn, uint page_count, uint loop, uint boot, int (*funcp)(uint, uint,uint,uint))$/;"	f
plr_print_page_dump	plr_err_handling.c	/^int  plr_print_page_dump(uint lsn, uint page_count, uint loop, uint boot)$/;"	f
plr_print_page_header	plr_err_handling.c	/^int plr_print_page_header(uint lsn, uint page_count, uint loop, uint boot)$/;"	f
plr_print_test_info	plr_err_handling.c	/^static void plr_print_test_info(void)$/;"	f	file:
print_option_name	plr_err_handling.c	/^static char *print_option_name[PRINT_OPTION_MAX] = $/;"	v	file:
save_crash_dump	plr_err_handling.c	/^int save_crash_dump(void* buf, uint length_byte, uint start_location)$/;"	f
set_crash_state_sdcard	plr_err_handling.c	/^int set_crash_state_sdcard(int err_num)$/;"	f
set_sw_reset_cnt	plr_err_handling.c	/^int set_sw_reset_cnt(int reset_cnt)$/;"	f
test_report	plr_err_handling.c	/^int test_report(char *args[], uint argc)$/;"	f
_PLR_ERR_HANDLING_H_	plr_err_handling.h	13;"	d
PLR_ECLEAN	plr_errno.h	/^	PLR_ECLEAN,$/;"	e	enum:PLR_ERROR
PLR_ECRASH	plr_errno.h	/^	PLR_ECRASH = 5,$/;"	e	enum:PLR_ERROR
PLR_EINVAL	plr_errno.h	/^	PLR_EINVAL,$/;"	e	enum:PLR_ERROR
PLR_EIO	plr_errno.h	/^	PLR_EIO,$/;"	e	enum:PLR_ERROR
PLR_ENODEV	plr_errno.h	/^	PLR_ENODEV	= 1,$/;"	e	enum:PLR_ERROR
PLR_ERROR	plr_errno.h	/^enum PLR_ERROR$/;"	g
PLR_EUSERDEFINED	plr_errno.h	/^	PLR_EUSERDEFINED,$/;"	e	enum:PLR_ERROR
PLR_NOERROR	plr_errno.h	/^	PLR_NOERROR = 0,$/;"	e	enum:PLR_ERROR
__PLR_ERROR__	plr_errno.h	2;"	d
EMMC_DEV_NUM	plr_hooking.h	43;"	d
EXTRA_BUF_ADDR	plr_hooking.h	32;"	d
EXTRA_BUF_SZ	plr_hooking.h	40;"	d
MMC_COND_BUF_ADDR	plr_hooking.h	34;"	d
MMC_DATA_BUF_ADDR	plr_hooking.h	35;"	d
PLR_SYSTEM	plr_hooking.h	21;"	d
READ_BUF_ADDR	plr_hooking.h	31;"	d
READ_BUF_SZ	plr_hooking.h	38;"	d
SDCARD_DEV_NUM	plr_hooking.h	42;"	d
SDCARD_FAT_PART_NUM	plr_hooking.h	47;"	d
SDCARD_PART_NUM	plr_hooking.h	46;"	d
SPI_0	plr_hooking.h	/^	SPI_0,$/;"	e	enum:__anon9
SPI_1	plr_hooking.h	/^	SPI_1,$/;"	e	enum:__anon9
SPI_2	plr_hooking.h	/^	SPI_2,$/;"	e	enum:__anon9
SW_RESET_CNT	plr_hooking.h	44;"	d
UFS_DEV_NUM	plr_hooking.h	45;"	d
WRITE_BUF_ADDR	plr_hooking.h	33;"	d
WRITE_BUF_SZ	plr_hooking.h	37;"	d
_PLR_HOOKING_H_	plr_hooking.h	13;"	d
ALARM_IOW	plr_hooking_5410_system.c	63;"	d	file:
ANDROID_ALARM_BASE_CMD	plr_hooking_5410_system.c	69;"	d	file:
ANDROID_ALARM_CLEAR	plr_hooking_5410_system.c	58;"	d	file:
ANDROID_ALARM_GET_TIME	plr_hooking_5410_system.c	67;"	d	file:
ANDROID_ALARM_IOCTL_TO_TYPE	plr_hooking_5410_system.c	70;"	d	file:
ANDROID_ALARM_SET	plr_hooking_5410_system.c	65;"	d	file:
ANDROID_ALARM_SET_AND_WAIT	plr_hooking_5410_system.c	66;"	d	file:
ANDROID_ALARM_SET_RTC	plr_hooking_5410_system.c	68;"	d	file:
ANDROID_ALARM_WAIT	plr_hooking_5410_system.c	61;"	d	file:
BLKDISCARD	plr_hooking_5410_system.c	32;"	d	file:
BLKSECDISCARD	plr_hooking_5410_system.c	33;"	d	file:
BYTE2SEC	plr_hooking_5410_system.c	36;"	d	file:
CONFIG_WD_PERIOD	plr_hooking_5410_system.c	54;"	d	file:
SEC2BYTE	plr_hooking_5410_system.c	35;"	d	file:
UNSTUFF_BITS	plr_hooking_5410_system.c	38;"	d	file:
do_bkops_test_enable	plr_hooking_5410_system.c	/^int do_bkops_test_enable(uint dev_num, int b_enable)$/;"	f
do_cache_ctrl	plr_hooking_5410_system.c	/^int do_cache_ctrl(uint dev_num, uint enable)$/;"	f
do_cache_flush	plr_hooking_5410_system.c	/^int do_cache_flush(uint dev_num)$/;"	f
do_dcache_disable	plr_hooking_5410_system.c	/^void do_dcache_disable(void)$/;"	f
do_dcache_enable	plr_hooking_5410_system.c	/^void do_dcache_enable(void)$/;"	f
do_erase	plr_hooking_5410_system.c	/^int do_erase(uint dev_num, uint start_sector, uint len) $/;"	f
do_erase_for_test	plr_hooking_5410_system.c	/^int do_erase_for_test(uint dev_num, uint start_sector, uint len, int type)$/;"	f
do_get_bkops_enable	plr_hooking_5410_system.c	/^int do_get_bkops_enable(uint dev_num)$/;"	f
do_get_bkops_urgent_caused	plr_hooking_5410_system.c	/^int do_get_bkops_urgent_caused(uint dev_num)$/;"	f
do_get_hpi_enable	plr_hooking_5410_system.c	/^int do_get_hpi_enable(uint dev_num)$/;"	f
do_get_hpi_out_of_int_time	plr_hooking_5410_system.c	/^int do_get_hpi_out_of_int_time(uint dev_num)$/;"	f
do_get_packed_info	plr_hooking_5410_system.c	/^struct mmc_packed* do_get_packed_info(int dev_num)$/;"	f
do_get_poweroff_notify_timeout	plr_hooking_5410_system.c	/^int do_get_poweroff_notify_timeout(uint dev_num, int notify_type)$/;"	f
do_get_s_a_timeout	plr_hooking_5410_system.c	/^int do_get_s_a_timeout(uint dev_num)$/;"	f
do_hpi_test_enable	plr_hooking_5410_system.c	/^int do_hpi_test_enable(uint dev_num, int b_enable)$/;"	f
do_internal_power_control	plr_hooking_5410_system.c	/^int do_internal_power_control(int dev_num, bool b_power)$/;"	f
do_mmc_awake	plr_hooking_5410_system.c	/^int do_mmc_awake(uint dev_num)$/;"	f
do_mmc_init_awake	plr_hooking_5410_system.c	/^int do_mmc_init_awake(uint dev_num)$/;"	f
do_mmc_poweroff_notify	plr_hooking_5410_system.c	/^int do_mmc_poweroff_notify(uint dev_num, int notify_type)$/;"	f
do_mmc_sleep	plr_hooking_5410_system.c	/^int do_mmc_sleep(uint dev_num)$/;"	f
do_mmc_suspend	plr_hooking_5410_system.c	/^int do_mmc_suspend(uint dev_num, int wake_time)$/;"	f
do_packed_add_list	plr_hooking_5410_system.c	/^int do_packed_add_list(int dev_num, ulong start, lbaint_t blkcnt, void*src, int rw)$/;"	f
do_packed_create_buff	plr_hooking_5410_system.c	/^void* do_packed_create_buff(int dev_num, void *buff)$/;"	f
do_packed_delete_buff	plr_hooking_5410_system.c	/^int do_packed_delete_buff(int dev_num)$/;"	f
do_packed_send_list	plr_hooking_5410_system.c	/^int do_packed_send_list(int dev_num)$/;"	f
do_read	plr_hooking_5410_system.c	/^int do_read(uint dev_num, uchar *data, uint start_sector, uint len)$/;"	f
do_send_internal_info	plr_hooking_5410_system.c	/^int do_send_internal_info(int dev_num, void * internal_info)$/;"	f
do_write	plr_hooking_5410_system.c	/^int do_write(uint dev_num, uchar *data, uint start_sector, uint len)$/;"	f
get_cpu_timer	plr_hooking_5410_system.c	/^u32 get_cpu_timer (ulong base)$/;"	f
get_erase_count	plr_hooking_5410_system.c	/^int get_erase_count(void)$/;"	f
get_mmc_cache_enable	plr_hooking_5410_system.c	/^int get_mmc_cache_enable(uint dev_num)$/;"	f
get_mmc_packed_enable	plr_hooking_5410_system.c	/^int get_mmc_packed_enable(uint dev_num)$/;"	f
get_mmc_partition_info	plr_hooking_5410_system.c	/^int get_mmc_partition_info(uint dev, int part_num, unsigned int *block_start, $/;"	f
get_mmc_product_name	plr_hooking_5410_system.c	/^int get_mmc_product_name(uint dev_num, char *name)$/;"	f
get_mmc_total_block_count	plr_hooking_5410_system.c	/^int get_mmc_total_block_count(uint dev_num)$/;"	f
get_packed_count	plr_hooking_5410_system.c	/^uint get_packed_count(int dev_num)$/;"	f
get_packed_max_sectors	plr_hooking_5410_system.c	/^uint get_packed_max_sectors(int dev_num, int rw)$/;"	f
get_rtc_time	plr_hooking_5410_system.c	/^u32 get_rtc_time(void)$/;"	f
get_tick_count	plr_hooking_5410_system.c	/^u32 get_tick_count(void)$/;"	f
get_tick_count64	plr_hooking_5410_system.c	/^u64 get_tick_count64(void)$/;"	f
reset_board	plr_hooking_5410_system.c	/^void reset_board(ulong ignored)$/;"	f
reset_tick_count	plr_hooking_5410_system.c	/^void reset_tick_count(int enable)$/;"	f
reset_tick_count64	plr_hooking_5410_system.c	/^void reset_tick_count64(void)$/;"	f
INTERNAL_ACTION_NONE	plr_internal_state.h	/^	INTERNAL_ACTION_NONE,$/;"	e	enum:__anon10
INTERNAL_ACTION_POWEROFF	plr_internal_state.h	/^	INTERNAL_ACTION_POWEROFF$/;"	e	enum:__anon10
INTERNAL_ACTION_TIMING_CALIBRATION	plr_internal_state.h	/^	INTERNAL_ACTION_TIMING_CALIBRATION,$/;"	e	enum:__anon10
POFF_TYPE_DELAY	plr_internal_state.h	/^	POFF_TYPE_DELAY$/;"	e	enum:__anon12
POFF_TYPE_TIMING	plr_internal_state.h	/^	POFF_TYPE_TIMING,$/;"	e	enum:__anon12
PROCESS_PHA_AFTER_WRITE_DONE	plr_internal_state.h	/^	PROCESS_PHA_AFTER_WRITE_DONE,$/;"	e	enum:__anon11
PROCESS_PHA_BKOPS	plr_internal_state.h	/^	PROCESS_PHA_BKOPS,$/;"	e	enum:__anon11
PROCESS_PHA_CACHE_FLUSH	plr_internal_state.h	/^	PROCESS_PHA_CACHE_FLUSH,$/;"	e	enum:__anon11
PROCESS_PHA_DATA_TRANS	plr_internal_state.h	/^	PROCESS_PHA_DATA_TRANS,$/;"	e	enum:__anon11
PROCESS_PHA_ERASE	plr_internal_state.h	/^	PROCESS_PHA_ERASE,$/;"	e	enum:__anon11
PROCESS_PHA_HPI	plr_internal_state.h	/^	PROCESS_PHA_HPI,$/;"	e	enum:__anon11
PROCESS_PHA_MAX	plr_internal_state.h	/^	PROCESS_PHA_MAX$/;"	e	enum:__anon11
PROCESS_PHA_NONE	plr_internal_state.h	/^	PROCESS_PHA_NONE,$/;"	e	enum:__anon11
PROCESS_PHA_OP_CONDITION	plr_internal_state.h	/^	PROCESS_PHA_OP_CONDITION,$/;"	e	enum:__anon11
PROCESS_PHA_PON	plr_internal_state.h	/^	PROCESS_PHA_PON,$/;"	e	enum:__anon11
PROCESS_PHA_SANITIZE	plr_internal_state.h	/^	PROCESS_PHA_SANITIZE,$/;"	e	enum:__anon11
PROCESS_PHA_SEND_CMD	plr_internal_state.h	/^	PROCESS_PHA_SEND_CMD,$/;"	e	enum:__anon11
PROCESS_PHA_SLEEP_AWAKE	plr_internal_state.h	/^	PROCESS_PHA_SLEEP_AWAKE,$/;"	e	enum:__anon11
PROCESS_PHA_WRITE_BUSY	plr_internal_state.h	/^	PROCESS_PHA_WRITE_BUSY,$/;"	e	enum:__anon11
_PLR_INTERNAL_POWEROFF_STATE_H_	plr_internal_state.h	13;"	d
_internal_info_	plr_internal_state.h	/^typedef struct _internal_info_ {$/;"	s
_poweroff_info_	plr_internal_state.h	/^typedef struct _poweroff_info_ {$/;"	s
action	plr_internal_state.h	/^	int action;						\/\/ current save or calibration or internal poweroff$/;"	m	struct:_internal_info_
b_internal	plr_internal_state.h	/^	int b_internal;								\/\/ 0 : external, 1 : internal$/;"	m	struct:_poweroff_info_
b_poff_require	plr_internal_state.h	/^	int b_poff_require;							\/\/ Require poweroff$/;"	m	struct:_poweroff_info_
internal_action_e	plr_internal_state.h	/^} internal_action_e;$/;"	t	typeref:enum:__anon10
internal_info_t	plr_internal_state.h	/^}internal_info_t;$/;"	t	typeref:struct:_internal_info_
last_poff_lsn	plr_internal_state.h	/^	uint last_poff_lsn;				\/\/ Read only. Do not change by upper user$/;"	m	struct:_internal_info_
p1	plr_internal_state.h	/^    u32 p1;$/;"	m	struct:_poweroff_info_
p2	plr_internal_state.h	/^    u32 p2;$/;"	m	struct:_poweroff_info_
poff_info	plr_internal_state.h	/^	poweroff_info_t poff_info;		\/\/ poweroff information$/;"	m	struct:_internal_info_
poff_phase	plr_internal_state.h	/^	processing_phase_e 	poff_phase;				\/\/ MMC_PROCESSING_POSISION$/;"	m	struct:_poweroff_info_
poff_type	plr_internal_state.h	/^	poweroff_type_e 	poff_type;				\/\/ POWEROFF_TYPE	$/;"	m	struct:_poweroff_info_
poff_value	plr_internal_state.h	/^	u64 poff_value;								\/\/ poweroff threshold, @sj 150703$/;"	m	struct:_poweroff_info_
poweroff_info_t	plr_internal_state.h	/^} poweroff_info_t;$/;"	t	typeref:struct:_poweroff_info_
poweroff_type_e	plr_internal_state.h	/^} poweroff_type_e;$/;"	t	typeref:enum:__anon12
processing_phase_e	plr_internal_state.h	/^} processing_phase_e;$/;"	t	typeref:enum:__anon11
result_spo	plr_internal_state.h	/^	int result_spo;								\/\/ INTERNAL_POWEROFF_FLAG == power off, $/;"	m	struct:_poweroff_info_
s1	plr_internal_state.h	/^    u32 s1;$/;"	m	struct:_poweroff_info_
s2	plr_internal_state.h	/^    u32 s2;$/;"	m	struct:_poweroff_info_
start	plr_internal_state.h	/^    u64 start;$/;"	m	struct:_poweroff_info_
CONFIG_SUM_WRITE_BUSYTIME	plr_io_statistics.c	16;"	d	file:
blksize	plr_io_statistics.c	/^	u32 blksize;$/;"	m	struct:__anon13	file:
blocks	plr_io_statistics.c	/^	u32 blocks;$/;"	m	struct:__anon13	file:
cmd	plr_io_statistics.c	/^	mmc_cmd_e cmd;$/;"	m	struct:__anon13	file:
generic_ffs	plr_io_statistics.c	/^static inline int generic_ffs(int x)$/;"	f	file:
generic_fls	plr_io_statistics.c	/^static inline int generic_fls(int x)$/;"	f	file:
get_request_buff	plr_io_statistics.c	/^static req_rw_stats_s* get_request_buff(u32 size)$/;"	f	file:
get_statistic_info	plr_io_statistics.c	/^mmc_statistic_s* get_statistic_info(void)$/;"	f
mmc_request_s	plr_io_statistics.c	/^} mmc_request_s;$/;"	t	typeref:struct:__anon13	file:
statistic_clear	plr_io_statistics.c	/^int statistic_clear(void)$/;"	f
statistic_destroy	plr_io_statistics.c	/^static int statistic_destroy(void)$/;"	f	file:
statistic_emmc_add	plr_io_statistics.c	/^static int statistic_emmc_add(mmc_request_s *mrq, u64 curTime, u64 latency)$/;"	f	file:
statistic_enable	plr_io_statistics.c	/^int statistic_enable(int enable)$/;"	f
statistic_feature_print	plr_io_statistics.c	/^static int statistic_feature_print(void)$/;"	f	file:
statistic_get_index	plr_io_statistics.c	/^static int statistic_get_index(u32 chunk_size) $/;"	f	file:
statistic_init	plr_io_statistics.c	/^static int statistic_init(void)$/;"	f	file:
statistic_init_sector_size	plr_io_statistics.c	/^static void statistic_init_sector_size(void)$/;"	f	file:
statistic_mmc_request_done	plr_io_statistics.c	/^void statistic_mmc_request_done(mmc_cmd_e cmd, uint blocks)$/;"	f
statistic_mmc_request_start	plr_io_statistics.c	/^void statistic_mmc_request_start(void)$/;"	f
statistic_parcer_print	plr_io_statistics.c	/^static int statistic_parcer_print(req_stats_s *stats1, req_stats_s *stats2)$/;"	f	file:
statistic_print	plr_io_statistics.c	/^static int statistic_print(void)$/;"	f	file:
statistic_result	plr_io_statistics.c	/^int statistic_result(void)$/;"	f
statistic_rw_parcer_print	plr_io_statistics.c	/^static int statistic_rw_parcer_print(req_rw_stats_s* log_parcer)$/;"	f	file:
statistic_rw_print	plr_io_statistics.c	/^static int statistic_rw_print(void)$/;"	f	file:
statistic_set_max_latency	plr_io_statistics.c	/^static void statistic_set_max_latency(u64* target, u64 compare)$/;"	f	file:
statistic_set_min_latency	plr_io_statistics.c	/^static void statistic_set_min_latency(u64* target, u64 compare)$/;"	f	file:
statistic_set_top_latency	plr_io_statistics.c	/^static void statistic_set_top_latency(u32 size, u64 latency)$/;"	f	file:
statistics	plr_io_statistics.c	/^mmc_statistic_s statistics;$/;"	v
MIN_REQ_SIZE	plr_io_statistics.h	17;"	d
REQ_SIZE_COUNT	plr_io_statistics.h	16;"	d
STAT_MMC_AWAKE	plr_io_statistics.h	/^	STAT_MMC_AWAKE,$/;"	e	enum:__anon14
STAT_MMC_BKOPS	plr_io_statistics.h	/^	STAT_MMC_BKOPS,$/;"	e	enum:__anon14
STAT_MMC_CACHE_FLUSH	plr_io_statistics.h	/^	STAT_MMC_CACHE_FLUSH,$/;"	e	enum:__anon14
STAT_MMC_HPI	plr_io_statistics.h	/^	STAT_MMC_HPI,$/;"	e	enum:__anon14
STAT_MMC_OP_CON	plr_io_statistics.h	/^	STAT_MMC_OP_CON,$/;"	e	enum:__anon14
STAT_MMC_OP_CON_WITH_PON	plr_io_statistics.h	/^	STAT_MMC_OP_CON_WITH_PON$/;"	e	enum:__anon14
STAT_MMC_PON_LONG	plr_io_statistics.h	/^	STAT_MMC_PON_LONG,$/;"	e	enum:__anon14
STAT_MMC_PON_SHORT	plr_io_statistics.h	/^	STAT_MMC_PON_SHORT,$/;"	e	enum:__anon14
STAT_MMC_READ	plr_io_statistics.h	/^	STAT_MMC_READ	= 1,$/;"	e	enum:__anon14
STAT_MMC_SLEEP	plr_io_statistics.h	/^	STAT_MMC_SLEEP,$/;"	e	enum:__anon14
STAT_MMC_WRITE	plr_io_statistics.h	/^	STAT_MMC_WRITE,$/;"	e	enum:__anon14
_PLR_STATISTICS_H	plr_io_statistics.h	12;"	d
_err_msg	plr_io_statistics.h	91;"	d
_sdbg_msg	plr_io_statistics.h	85;"	d
_sdbg_msg	plr_io_statistics.h	87;"	d
awake_stats	plr_io_statistics.h	/^	req_stats_s awake_stats;$/;"	m	struct:__anon17
bkops_stats	plr_io_statistics.h	/^	req_stats_s bkops_stats;$/;"	m	struct:__anon17
chunk_size	plr_io_statistics.h	/^	u32 chunk_size;$/;"	m	struct:__anon16
cnt	plr_io_statistics.h	/^	u64 cnt;$/;"	m	struct:__anon15
enable	plr_io_statistics.h	/^	int enable;$/;"	m	struct:__anon17
flush_stats	plr_io_statistics.h	/^	req_stats_s flush_stats;$/;"	m	struct:__anon17
high_latency	plr_io_statistics.h	/^	u64 high_latency;$/;"	m	struct:__anon17
high_latency_chunk	plr_io_statistics.h	/^	u32 high_latency_chunk;$/;"	m	struct:__anon17
hpi_stats	plr_io_statistics.h	/^	req_stats_s hpi_stats;$/;"	m	struct:__anon17
init	plr_io_statistics.h	/^	int init;$/;"	m	struct:__anon17
max_latency	plr_io_statistics.h	/^	u64 max_latency;	$/;"	m	struct:__anon15
min_latency	plr_io_statistics.h	/^	u64 min_latency;$/;"	m	struct:__anon15
mmc_cmd_e	plr_io_statistics.h	/^} mmc_cmd_e;$/;"	t	typeref:enum:__anon14
mmc_statistic_s	plr_io_statistics.h	/^}mmc_statistic_s;$/;"	t	typeref:struct:__anon17
op_con_stats	plr_io_statistics.h	/^	req_stats_s op_con_stats;$/;"	m	struct:__anon17
op_con_with_pon_stats	plr_io_statistics.h	/^	req_stats_s op_con_with_pon_stats;$/;"	m	struct:__anon17
pon_long_stats	plr_io_statistics.h	/^	req_stats_s pon_long_stats;$/;"	m	struct:__anon17
pon_short_stats	plr_io_statistics.h	/^	req_stats_s pon_short_stats;$/;"	m	struct:__anon17
rCnt	plr_io_statistics.h	/^	u64 rCnt;$/;"	m	struct:__anon16
r_latency	plr_io_statistics.h	/^	u64 r_latency;$/;"	m	struct:__anon16
r_max_latency	plr_io_statistics.h	/^	u64 r_max_latency;$/;"	m	struct:__anon16
r_min_latency	plr_io_statistics.h	/^	u64 r_min_latency;$/;"	m	struct:__anon16
req_rw_stats_s	plr_io_statistics.h	/^}req_rw_stats_s;$/;"	t	typeref:struct:__anon16
req_stats_s	plr_io_statistics.h	/^}req_stats_s;$/;"	t	typeref:struct:__anon15
rw_stats	plr_io_statistics.h	/^	req_rw_stats_s *rw_stats;$/;"	m	struct:__anon17
sleep_stats	plr_io_statistics.h	/^	req_stats_s sleep_stats;$/;"	m	struct:__anon17
start_time	plr_io_statistics.h	/^	u64 start_time;$/;"	m	struct:__anon17
total_latency	plr_io_statistics.h	/^	u64 total_latency;$/;"	m	struct:__anon15
total_rBlocks	plr_io_statistics.h	/^	u64 total_rBlocks;$/;"	m	struct:__anon17
total_rCnt	plr_io_statistics.h	/^	u64 total_rCnt;$/;"	m	struct:__anon17
total_rlatency	plr_io_statistics.h	/^	u64 total_rlatency;$/;"	m	struct:__anon17
total_wBlocks	plr_io_statistics.h	/^	u64 total_wBlocks;$/;"	m	struct:__anon17
total_wCnt	plr_io_statistics.h	/^	u64 total_wCnt;$/;"	m	struct:__anon17
total_wlatency	plr_io_statistics.h	/^	u64 total_wlatency;$/;"	m	struct:__anon17
wCnt	plr_io_statistics.h	/^	u64 wCnt;$/;"	m	struct:__anon16
w_latency	plr_io_statistics.h	/^	u64 w_latency;$/;"	m	struct:__anon16
w_max_latency	plr_io_statistics.h	/^	u64 w_max_latency;$/;"	m	struct:__anon16
w_min_latency	plr_io_statistics.h	/^	u64 w_min_latency;$/;"	m	struct:__anon16
EVENT_PARTIAL_WRITE_1	plr_main.c	/^	EVENT_PARTIAL_WRITE_1 = 1,$/;"	e	enum:verification_event	file:
EVENT_PARTIAL_WRITE_2	plr_main.c	/^	EVENT_PARTIAL_WRITE_2,$/;"	e	enum:verification_event	file:
MAX_EVENT	plr_main.c	/^	MAX_EVENT$/;"	e	enum:verification_event	file:
adjust_test_sector_length	plr_main.c	/^static void adjust_test_sector_length(void)$/;"	f	file:
aging_normal_test	plr_main.c	/^static struct plr_func aging_normal_test[] = {$/;"	v	typeref:struct:plr_func	file:
check_device_command	plr_main.c	/^static int check_device_command(void)$/;"	f	file:
g_crash_cnt	plr_main.c	/^uint g_crash_cnt;$/;"	v
g_plr_state	plr_main.c	/^struct plr_state g_plr_state __attribute__ ((aligned(0x8)));$/;"	v	typeref:struct:plr_state
g_powerloss_time_boundary	plr_main.c	/^u32 g_powerloss_time_boundary = 0xFFFFFFFF;$/;"	v
g_prepare_option	plr_main.c	/^int g_prepare_option = 0;$/;"	v
g_require_powerloss	plr_main.c	/^bool g_require_powerloss = FALSE;$/;"	v
initialize	plr_main.c	/^	plrtest_fn initialize;$/;"	m	struct:plr_func	file:
make_body_data	plr_main.c	/^static void make_body_data(uchar * buf)$/;"	f	file:
p_plr_func	plr_main.c	/^static struct plr_func *p_plr_func = NULL;$/;"	v	typeref:struct:plr_func	file:
plr_func	plr_main.c	/^struct plr_func {$/;"	s	file:
plr_main	plr_main.c	/^int plr_main(int argc, char *argv[])$/;"	f
plr_start_initialization	plr_main.c	/^int plr_start_initialization(void)$/;"	f
plr_start_verification	plr_main.c	/^static int plr_start_verification(void)$/;"	f	file:
plr_start_writing	plr_main.c	/^static int plr_start_writing( void )$/;"	f	file:
plrtest_fn	plr_main.c	/^typedef int (*plrtest_fn)( uchar * buf, uint test_start_sector, uint test_sector_length );$/;"	t	file:
poff_driver_test	plr_main.c	/^static struct plr_func poff_driver_test[] = {$/;"	v	typeref:struct:plr_func	file:
previous_crash_state_result	plr_main.c	/^static int previous_crash_state_result(void)$/;"	f	file:
read	plr_main.c	/^	plrtest_fn read;$/;"	m	struct:plr_func	file:
register_func_table	plr_main.c	/^int register_func_table(void)$/;"	f
send_device_info	plr_main.c	/^static int send_device_info(void)$/;"	f	file:
send_write_result	plr_main.c	/^static int send_write_result(int result)$/;"	f	file:
verification_error_result	plr_main.c	/^static int verification_error_result(int result)$/;"	f	file:
verification_event	plr_main.c	/^enum  verification_event {$/;"	g	file:
write	plr_main.c	/^	plrtest_fn write;$/;"	m	struct:plr_func	file:
PLR_MMC_H	plr_mmc.h	2;"	d
k	plr_mmc.h	/^    int k;$/;"	m	struct:mmc
k	plr_mmc.h	/^    int k;$/;"	m	struct:mmc_packed
mmc	plr_mmc.h	/^struct mmc {$/;"	s
mmc_packed	plr_mmc.h	/^struct mmc_packed {$/;"	s
q	plr_mmc.h	/^    int q;$/;"	m	struct:mmc
q	plr_mmc.h	/^    int q;$/;"	m	struct:mmc_packed
r	plr_mmc.h	/^    int r;$/;"	m	struct:mmc
r	plr_mmc.h	/^    int r;$/;"	m	struct:mmc_packed
CMD_POWEROFF	plr_mmc_poweroff.h	/^    CMD_POWEROFF,$/;"	e	enum:mmc_poweroff_cmd
CMD_POWEROFF_STOP	plr_mmc_poweroff.h	/^    CMD_POWEROFF_STOP$/;"	e	enum:mmc_poweroff_cmd
CMD_POWERON	plr_mmc_poweroff.h	/^    CMD_POWERON,$/;"	e	enum:mmc_poweroff_cmd
CMD_READY	plr_mmc_poweroff.h	/^    CMD_READY = 0,$/;"	e	enum:mmc_poweroff_cmd
PLR_MMC_POWEROFF_H	plr_mmc_poweroff.h	2;"	d
STATE_POWEROFF	plr_mmc_poweroff.h	/^    STATE_POWEROFF,$/;"	e	enum:mmc_poweroff_state
STATE_POWEROFF_READY	plr_mmc_poweroff.h	/^    STATE_POWEROFF_READY,$/;"	e	enum:mmc_poweroff_state
STATE_POWEROFF_STOP	plr_mmc_poweroff.h	/^    STATE_POWEROFF_STOP,$/;"	e	enum:mmc_poweroff_state
STATE_POWEROFF_TIMER	plr_mmc_poweroff.h	/^    STATE_POWEROFF_TIMER$/;"	e	enum:mmc_poweroff_state
STATE_POWERON	plr_mmc_poweroff.h	/^    STATE_POWERON,$/;"	e	enum:mmc_poweroff_state
STATE_READY	plr_mmc_poweroff.h	/^    STATE_READY = 0,$/;"	e	enum:mmc_poweroff_state
busy	plr_mmc_poweroff.h	/^    int busy;$/;"	m	struct:mmc_poweroff_cond
command	plr_mmc_poweroff.h	/^    int command;$/;"	m	struct:mmc_poweroff_cond
excute_internal	plr_mmc_poweroff.h	/^    int excute_internal;$/;"	m	struct:mmc_poweroff_cond
mmc_poweroff_cmd	plr_mmc_poweroff.h	/^enum mmc_poweroff_cmd {$/;"	g
mmc_poweroff_cond	plr_mmc_poweroff.h	/^struct mmc_poweroff_cond {$/;"	s
mmc_poweroff_state	plr_mmc_poweroff.h	/^enum mmc_poweroff_state {$/;"	g
ret	plr_mmc_poweroff.h	/^    int ret;$/;"	m	struct:mmc_poweroff_cond
AGING_VERIFICATION_INTERVAL	plr_pattern.c	17;"	d	file:
IS_AGING	plr_pattern.c	20;"	d	file:
IS_ERASE_TEST	plr_pattern.c	21;"	d	file:
IS_PATTERN_EVEN	plr_pattern.c	19;"	d	file:
IS_PATTERN_ODD	plr_pattern.c	18;"	d	file:
OPTYPE_VERIFY	plr_pattern.c	/^static char *OPTYPE_VERIFY 	= "Verify";$/;"	v	file:
OPTYPE_WRITE	plr_pattern.c	/^static char *OPTYPE_WRITE	= "Write";$/;"	v	file:
PATTERN_DEBUG_MSG	plr_pattern.c	11;"	d	file:
PATTERN_DEBUG_MSG	plr_pattern.c	13;"	d	file:
_num_of_pattern	plr_pattern.c	/^static uint _num_of_pattern = 0;$/;"	v	file:
_pattern_linker	plr_pattern.c	/^static struct Pattern_Function _pattern_linker;$/;"	v	typeref:struct:Pattern_Function	file:
_state	plr_pattern.c	/^static struct plr_state *_state = NULL;$/;"	v	typeref:struct:plr_state	file:
_write	plr_pattern.c	/^static int _write(uchar* buf, uint lsn, uint request_sectors, uint request_num, uint next_lsn)$/;"	f	file:
check_pattern_func	plr_pattern.c	/^int check_pattern_func(void)$/;"	f
init_pattern	plr_pattern.c	/^void init_pattern(struct plr_state* state, bool is_erase_test)$/;"	f
print_start_pattern	plr_pattern.c	/^static void print_start_pattern(char *op_type, uint current_loop)$/;"	f	file:
regist_pattern	plr_pattern.c	/^void regist_pattern(struct Pattern_Function pattern_link)$/;"	f
send_token_writing	plr_pattern.c	/^static void send_token_writing(uint lsn, uint request_sectors, uint loop, uint boot)$/;"	f	file:
send_token_writing_seed	plr_pattern.c	/^static void send_token_writing_seed(uint seed)$/;"	f	file:
verify_pattern	plr_pattern.c	/^int verify_pattern(uchar* buf)$/;"	f
write_pattern	plr_pattern.c	/^int write_pattern(uchar* buf)$/;"	f
Pattern_Function	plr_pattern.h	/^struct Pattern_Function$/;"	s
__PLR_PATTERN__	plr_pattern.h	2;"	d
do_extra_verification	plr_pattern.h	/^	verify_extra 	do_extra_verification;$/;"	m	struct:Pattern_Function
do_pattern_1	plr_pattern.h	/^	process_pattern do_pattern_1;$/;"	m	struct:Pattern_Function
do_pattern_2	plr_pattern.h	/^	process_pattern do_pattern_2;$/;"	m	struct:Pattern_Function
init_pattern_1	plr_pattern.h	/^	pattern_init 	init_pattern_1;$/;"	m	struct:Pattern_Function
init_pattern_2	plr_pattern.h	/^	pattern_init 	init_pattern_2;$/;"	m	struct:Pattern_Function
op_pattern	plr_pattern.h	/^typedef int (*op_pattern)(uchar *, uint ,uint ,uint ,uint);$/;"	t
pattern_init	plr_pattern.h	/^typedef void (*pattern_init)(struct plr_write_info*);$/;"	t
process_pattern	plr_pattern.h	/^typedef int (*process_pattern)(uchar *, uint, uint, op_pattern);$/;"	t
verify_extra	plr_pattern.h	/^typedef int (*verify_extra)(uchar*, struct plr_state*);$/;"	t
ERASE_ALL	plr_precondition.c	18;"	d	file:
FILL_BLOCK_CNT	plr_precondition.c	19;"	d	file:
check_erase_zero_condition	plr_precondition.c	/^int check_erase_zero_condition(uint erase_area_start, uint erase_area_length)$/;"	f
make_dirty_condition	plr_precondition.c	/^static int make_dirty_condition(uint test_start_sector, uint test_sector_length, int total_sectors)$/;"	f	file:
make_erase_zero_condition	plr_precondition.c	/^make_erase_zero_condition(uint erase_area_start, uint erase_area_length, int total_sectors)$/;"	f	file:
plr_prepare	plr_precondition.c	/^int plr_prepare(	uint test_start_sector, $/;"	f
precondition_by_protocol	plr_precondition.c	/^int precondition_by_protocol()$/;"	f
_PLR_PRECONDITION_H_	plr_precondition.h	13;"	d
ACK_PARAM_COUNT	plr_protocol.c	/^const int ACK_PARAM_COUNT[MAX_SEND_TOKEN] = {$/;"	v
ACK_PARAM_TOTAL_COUNT	plr_protocol.c	152;"	d	file:
CONFIG_SYS_CBSIZE	plr_protocol.c	21;"	d	file:
PLRACK	plr_protocol.c	19;"	d	file:
PLRTOKEN	plr_protocol.c	18;"	d	file:
PPROTOCOL_PARAM	plr_protocol.c	/^} PROTOCOL_PARAM, *PPROTOCOL_PARAM;$/;"	t	typeref:struct:_protocol_param_	file:
PROTOCOL_PARAM	plr_protocol.c	/^} PROTOCOL_PARAM, *PPROTOCOL_PARAM;$/;"	t	typeref:struct:_protocol_param_	file:
_protocol_param_	plr_protocol.c	/^typedef struct _protocol_param_{$/;"	s	file:
_recv_acks	plr_protocol.c	/^static e_receive_token _recv_acks( e_send_token token, char *buf )$/;"	f	file:
_release_params	plr_protocol.c	/^static void _release_params(PPROTOCOL_PARAM p)$/;"	f	file:
_split_params	plr_protocol.c	/^static int _split_params(char* str, PPROTOCOL_PARAM p)$/;"	f	file:
check_valid_string	plr_protocol.c	/^static char check_valid_string( char* buf, const char *cmp_str)$/;"	f	file:
crc8	plr_protocol.c	/^static uchar crc8(uchar *arr, int len)$/;"	f	file:
crc_table	plr_protocol.c	/^static unsigned char crc_table[256] = {$/;"	v	file:
do_recv_acks	plr_protocol.c	/^static int do_recv_acks( e_send_token token, PPROTOCOL_PARAM p )$/;"	f	file:
num_of_params	plr_protocol.c	/^	int num_of_params;$/;"	m	struct:_protocol_param_	file:
params	plr_protocol.c	/^	char **params;$/;"	m	struct:_protocol_param_	file:
readline_plrack_compare	plr_protocol.c	/^static int readline_plrack_compare( char *buf )$/;"	f	file:
receive_token_string	plr_protocol.c	/^const char* receive_token_string[MAX_RECIEVE_TOKEN] = {$/;"	v
recv_param_error_check	plr_protocol.c	/^static int recv_param_error_check( e_send_token token, char *buf, PPROTOCOL_PARAM p)$/;"	f	file:
send_token	plr_protocol.c	/^int send_token( e_send_token token, char *buf )$/;"	f
send_token_param	plr_protocol.c	/^int send_token_param( e_send_token token, uint param ) $/;"	f
send_token_string	plr_protocol.c	/^const char* send_token_string[MAX_SEND_TOKEN] = {$/;"	v
set_recv_param_to_state	plr_protocol.c	/^static void set_recv_param_to_state(e_send_token sent_token, PPROTOCOL_PARAM p)$/;"	f	file:
set_test_name_parsing	plr_protocol.c	/^void set_test_name_parsing(uchar *test_name)$/;"	f
wait_getc	plr_protocol.c	/^int wait_getc(char c)$/;"	f
MAX_RECIEVE_TOKEN	plr_protocol.h	/^	MAX_RECIEVE_TOKEN$/;"	e	enum:_e_receive_token_
MAX_SEND_TOKEN	plr_protocol.h	/^	MAX_SEND_TOKEN$/;"	e	enum:_e_send_token_
PLRACK_FAIL	plr_protocol.h	/^	PLRACK_FAIL,$/;"	e	enum:_e_receive_token_
PLRACK_RESET	plr_protocol.h	/^	PLRACK_RESET,$/;"	e	enum:_e_receive_token_
PLRACK_SUCCESS	plr_protocol.h	/^	PLRACK_SUCCESS,$/;"	e	enum:_e_receive_token_
PLRTOKEN_BOOT_CNT	plr_protocol.h	/^	PLRTOKEN_BOOT_CNT,$/;"	e	enum:_e_send_token_
PLRTOKEN_BOOT_DONE	plr_protocol.h	/^	PLRTOKEN_BOOT_DONE,$/;"	e	enum:_e_send_token_
PLRTOKEN_BUFFER_SIZE	plr_protocol.h	15;"	d
PLRTOKEN_CRASH_LOG_END	plr_protocol.h	/^	PLRTOKEN_CRASH_LOG_END,$/;"	e	enum:_e_send_token_
PLRTOKEN_CRASH_LOG_START	plr_protocol.h	/^	PLRTOKEN_CRASH_LOG_START,$/;"	e	enum:_e_send_token_
PLRTOKEN_ENV_ERROR	plr_protocol.h	/^	PLRTOKEN_ENV_ERROR,$/;"	e	enum:_e_send_token_
PLRTOKEN_EUPLOAD_DONE	plr_protocol.h	/^	PLRTOKEN_EUPLOAD_DONE,$/;"	e	enum:_e_send_token_
PLRTOKEN_EUPLOAD_START	plr_protocol.h	/^	PLRTOKEN_EUPLOAD_START,$/;"	e	enum:_e_send_token_
PLRTOKEN_INIT_DONE	plr_protocol.h	/^	PLRTOKEN_INIT_DONE,$/;"	e	enum:_e_send_token_
PLRTOKEN_INIT_INFO	plr_protocol.h	/^	PLRTOKEN_INIT_INFO,$/;"	e	enum:_e_send_token_
PLRTOKEN_INIT_START	plr_protocol.h	/^	PLRTOKEN_INIT_START,$/;"	e	enum:_e_send_token_
PLRTOKEN_KDNLOAD_DONE	plr_protocol.h	/^	PLRTOKEN_KDNLOAD_DONE,$/;"	e	enum:_e_send_token_
PLRTOKEN_KDNLOAD_START	plr_protocol.h	/^	PLRTOKEN_KDNLOAD_START,$/;"	e	enum:_e_send_token_
PLRTOKEN_KFILE_PATH	plr_protocol.h	/^	PLRTOKEN_KFILE_PATH,$/;"	e	enum:_e_send_token_
PLRTOKEN_KTFTP_SETTING	plr_protocol.h	/^	PLRTOKEN_KTFTP_SETTING,$/;"	e	enum:_e_send_token_
PLRTOKEN_POWERLOSS_CONFIG	plr_protocol.h	/^	PLRTOKEN_POWERLOSS_CONFIG,$/;"	e	enum:_e_send_token_
PLRTOKEN_PREPARE_DONE	plr_protocol.h	/^	PLRTOKEN_PREPARE_DONE,$/;"	e	enum:_e_send_token_
PLRTOKEN_RECV_RANDOM_SEED	plr_protocol.h	/^	PLRTOKEN_RECV_RANDOM_SEED,$/;"	e	enum:_e_send_token_
PLRTOKEN_RECV_WRITE_INFO	plr_protocol.h	/^	PLRTOKEN_RECV_WRITE_INFO,$/;"	e	enum:_e_send_token_
PLRTOKEN_RESET	plr_protocol.h	/^	PLRTOKEN_RESET,$/;"	e	enum:_e_send_token_
PLRTOKEN_SEND_RANDOM_SEED	plr_protocol.h	/^	PLRTOKEN_SEND_RANDOM_SEED,$/;"	e	enum:_e_send_token_
PLRTOKEN_SEND_WRITE_INFO	plr_protocol.h	/^	PLRTOKEN_SEND_WRITE_INFO,$/;"	e	enum:_e_send_token_
PLRTOKEN_SET_ADDRESS	plr_protocol.h	/^	PLRTOKEN_SET_ADDRESS,$/;"	e	enum:_e_send_token_
PLRTOKEN_SET_LOOPCNT	plr_protocol.h	/^	PLRTOKEN_SET_LOOPCNT, $/;"	e	enum:_e_send_token_
PLRTOKEN_SET_PLOFF_INFO	plr_protocol.h	/^	PLRTOKEN_SET_PLOFF_INFO,$/;"	e	enum:_e_send_token_
PLRTOKEN_SET_STATISTICS	plr_protocol.h	/^	PLRTOKEN_SET_STATISTICS,$/;"	e	enum:_e_send_token_
PLRTOKEN_TEST_CASE	plr_protocol.h	/^	PLRTOKEN_TEST_CASE,$/;"	e	enum:_e_send_token_
PLRTOKEN_TEST_FINISH	plr_protocol.h	/^	PLRTOKEN_TEST_FINISH,$/;"	e	enum:_e_send_token_
PLRTOKEN_TEST_INFO	plr_protocol.h	/^	PLRTOKEN_TEST_INFO,$/;"	e	enum:_e_send_token_
PLRTOKEN_UDNLOAD_DONE	plr_protocol.h	/^	PLRTOKEN_UDNLOAD_DONE,$/;"	e	enum:_e_send_token_
PLRTOKEN_UDNLOAD_START	plr_protocol.h	/^	PLRTOKEN_UDNLOAD_START,$/;"	e	enum:_e_send_token_
PLRTOKEN_UFILE_PATH	plr_protocol.h	/^	PLRTOKEN_UFILE_PATH,$/;"	e	enum:_e_send_token_
PLRTOKEN_UTFTP_APPLITED	plr_protocol.h	/^	PLRTOKEN_UTFTP_APPLITED,$/;"	e	enum:_e_send_token_
PLRTOKEN_UTFTP_SETTING	plr_protocol.h	/^	PLRTOKEN_UTFTP_SETTING,$/;"	e	enum:_e_send_token_
PLRTOKEN_UTFTP_STATE	plr_protocol.h	/^	PLRTOKEN_UTFTP_STATE,$/;"	e	enum:_e_send_token_
PLRTOKEN_UUPLOAD_DONE	plr_protocol.h	/^	PLRTOKEN_UUPLOAD_DONE,$/;"	e	enum:_e_send_token_
PLRTOKEN_UUPLOAD_START	plr_protocol.h	/^	PLRTOKEN_UUPLOAD_START,$/;"	e	enum:_e_send_token_
PLRTOKEN_VERI_DONE	plr_protocol.h	/^	PLRTOKEN_VERI_DONE,$/;"	e	enum:_e_send_token_
PLRTOKEN_VERI_START	plr_protocol.h	/^	PLRTOKEN_VERI_START,$/;"	e	enum:_e_send_token_
PLRTOKEN_WAIT_EXT_SW_RESET	plr_protocol.h	/^	PLRTOKEN_WAIT_EXT_SW_RESET,$/;"	e	enum:_e_send_token_
PLRTOKEN_WRITE_CONFIG	plr_protocol.h	/^	PLRTOKEN_WRITE_CONFIG,$/;"	e	enum:_e_send_token_
PLRTOKEN_WRITE_DONE	plr_protocol.h	/^	PLRTOKEN_WRITE_DONE,$/;"	e	enum:_e_send_token_
PLRTOKEN_WRITE_START	plr_protocol.h	/^	PLRTOKEN_WRITE_START,$/;"	e	enum:_e_send_token_
_PLR_PROTOCOL_H_	plr_protocol.h	13;"	d
_e_receive_token_	plr_protocol.h	/^typedef enum  _e_receive_token_{$/;"	g
_e_send_token_	plr_protocol.h	/^typedef enum  _e_send_token_{$/;"	g
e_receive_token	plr_protocol.h	/^} e_receive_token;$/;"	t	typeref:enum:_e_receive_token_
e_send_token	plr_protocol.h	/^} e_send_token;$/;"	t	typeref:enum:_e_send_token_
index	plr_rand_sector.c	/^static unsigned int index;$/;"	v	file:
index2	plr_rand_sector.c	/^static uint index2;$/;"	v	file:
state	plr_rand_sector.c	/^static unsigned int state[16];$/;"	v	file:
state2	plr_rand_sector.c	/^static unsigned int state2[16];$/;"	v	file:
well512_rand	plr_rand_sector.c	/^unsigned int well512_rand(void)$/;"	f
well512_rand2	plr_rand_sector.c	/^unsigned int well512_rand2(void)$/;"	f
well512_seed	plr_rand_sector.c	/^void well512_seed(unsigned int nSeed)$/;"	f
well512_seed2	plr_rand_sector.c	/^void well512_seed2(unsigned int nSeed)$/;"	f
ABS	plr_rtc64.c	27;"	d	file:
RTC_ACCESS	plr_rtc64.c	/^} RTC_ACCESS;$/;"	t	typeref:enum:__anon18	file:
RTC_DISABLE	plr_rtc64.c	/^	RTC_DISABLE$/;"	e	enum:__anon18	file:
RTC_ENABLE	plr_rtc64.c	/^	RTC_ENABLE,$/;"	e	enum:__anon18	file:
SIGN	plr_rtc64.c	26;"	d	file:
TICK_BITS	plr_rtc64.c	/^const u32	TICK_BITS = 32;						\/\/ You may change the value as the one of system supports$/;"	v
_rtc64_get_time	plr_rtc64.c	/^static u32 _rtc64_get_time(void)$/;"	f	file:
_sec_base	plr_rtc64.c	/^static u32	_sec_base;							\/\/ The value calculated from _tick_base$/;"	v	file:
_sec_offset	plr_rtc64.c	/^static u32	_sec_offset;						\/\/ The value caught from system$/;"	v	file:
_tick_base	plr_rtc64.c	/^static u32	_tick_base;							\/\/ The value used as the tick origin (start value)$/;"	v	file:
_tick_offset	plr_rtc64.c	/^static u32	_tick_offset;						\/\/ The value caught while system booting$/;"	v	file:
_tick_up	plr_rtc64.c	/^static s64	_tick_up;							\/\/ Keeps upper 32 bits of 64bit tick value$/;"	v	file:
rtc64_get_tick_count	plr_rtc64.c	/^u64 rtc64_get_tick_count(void)$/;"	f
rtc64_reset_tick_count	plr_rtc64.c	/^void rtc64_reset_tick_count(void)$/;"	f
rtc64_set_tick_count	plr_rtc64.c	/^void rtc64_set_tick_count(u32 tick_base)$/;"	f
test_rtc_64	plr_rtc64.c	/^void test_rtc_64(void)$/;"	f
test_rtc_64__tick_increment	plr_rtc64.c	/^static void test_rtc_64__tick_increment(void)$/;"	f	file:
test_rtc_64__tick_sync	plr_rtc64.c	/^static void test_rtc_64__tick_sync(void)$/;"	f	file:
PLR_RTC64_H_	plr_rtc64.h	2;"	d
RTC64_UNIT_TEST	plr_rtc64.h	17;"	d
BLKDISCARD	plr_system.c	27;"	d	file:
BLKSECDISCARD	plr_system.c	28;"	d	file:
BYTE_1G	plr_system.c	30;"	d	file:
MB	plr_system.c	32;"	d	file:
O_DIRECT	plr_system.c	46;"	d	file:
O_DIRECT	plr_system.c	48;"	d	file:
SEC_1G	plr_system.c	31;"	d	file:
_kbhit	plr_system.c	/^static char _kbhit (void)$/;"	f	file:
close_mmc	plr_system.c	/^int close_mmc(void)$/;"	f
close_other_devices	plr_system.c	/^int close_other_devices(void)$/;"	f
console_buffer	plr_system.c	/^char console_buffer[CONFIG_SYS_CBSIZE + 1];$/;"	v
console_init_r	plr_system.c	/^int console_init_r(void)$/;"	f
crc32	plr_system.c	/^uint crc32 (uint crc, const unsigned char *buf, uint len)$/;"	f
dev_erase	plr_system.c	/^int dev_erase(uint dev_num, uint start_sector, uint len, int type) $/;"	f
dev_ext4_mount	plr_system.c	/^int dev_ext4_mount(char *dev_name, char* test_path)$/;"	f
dev_get_size	plr_system.c	/^int dev_get_size(char *dev_name, unsigned long long *size)$/;"	f
excute_internal_reset	plr_system.c	/^int excute_internal_reset(void)$/;"	f
free_buffers	plr_system.c	/^void free_buffers(void)$/;"	f
g_extra_buf_addr	plr_system.c	/^char *g_extra_buf_addr;$/;"	v
g_mmc_cond_buf_addr	plr_system.c	/^char *g_mmc_cond_buf_addr;$/;"	v
g_read_buf_addr	plr_system.c	/^char *g_read_buf_addr;$/;"	v
g_write_buf_addr	plr_system.c	/^char *g_write_buf_addr;$/;"	v
get_block_total_size	plr_system.c	/^uint64_t get_block_total_size(int fd)$/;"	f
linux_kbhit	plr_system.c	/^static int linux_kbhit(void)$/;"	f	file:
mmc_fd	plr_system.c	/^int mmc_fd;$/;"	v
poweroff_data_check	plr_system.c	/^int poweroff_data_check(void)$/;"	f
prepare_buffers	plr_system.c	/^int prepare_buffers(void)$/;"	f
prepare_mmc	plr_system.c	/^int prepare_mmc(void)$/;"	f
prepare_other_devices	plr_system.c	/^int prepare_other_devices(void)$/;"	f
readline	plr_system.c	/^int readline (const char *const prompt)$/;"	f
readline_into_buffer	plr_system.c	/^static int readline_into_buffer (char * buffer)$/;"	f	file:
rtc_get_time	plr_system.c	/^unsigned long rtc_get_time(void)$/;"	f
run_command	plr_system.c	/^int run_command (const char *cmd, int flag)$/;"	f
safe_write	plr_system.c	/^int safe_write(int fd, const void *buf, size_t count)$/;"	f
sd_state_fd	plr_system.c	/^int sd_state_fd;$/;"	v
send_data_poweroff	plr_system.c	/^int send_data_poweroff(internal_info_t *internal_info)$/;"	f
simple_strtoul	plr_system.c	/^unsigned long simple_strtoul(const char *cp,char **endp,unsigned int base)$/;"	f
sw_reset_fd	plr_system.c	/^int sw_reset_fd;$/;"	v
timespecsub	plr_system.c	34;"	d	file:
tstc	plr_system.c	/^int tstc(void)$/;"	f
udelay	plr_system.c	/^void udelay(unsigned long usec)$/;"	f
ALIGN	plr_system.h	13;"	d
BYTE2SEC	plr_system.h	24;"	d
CONFIG_SYS_CBSIZE	plr_system.h	40;"	d
CONFIG_SYS_CBSIZE	plr_system.h	5;"	d
DEVICE_CACHE_CONTROL_PATH	plr_system.h	38;"	d
DEVICE_POWEROFF_COND_PATH	plr_system.h	36;"	d
DEVICE_POWEROFF_DATA_PATH	plr_system.h	34;"	d
MB	plr_system.h	6;"	d
MMC_PATH	plr_system.h	26;"	d
MMC_PATH	plr_system.h	30;"	d
MS_BUSY_DELAY	plr_system.h	45;"	d
MS_BUSY_TIMEOUT	plr_system.h	44;"	d
MS_RELOAD_DELAY	plr_system.h	47;"	d
MS_RELOAD_TIMEOUT	plr_system.h	46;"	d
MS_SEND_CMD_DELAY	plr_system.h	43;"	d
MS_SEND_CMD_TIMEOUT	plr_system.h	42;"	d
PAGE_ALIGN	plr_system.h	12;"	d
PAGE_SIZE	plr_system.h	9;"	d
SD_STATE_PATH	plr_system.h	27;"	d
SD_STATE_PATH	plr_system.h	31;"	d
SEC2BYTE	plr_system.h	23;"	d
SW_RESET_PATH	plr_system.h	28;"	d
_PLR_SYSTEM_H_	plr_system.h	2;"	d
__ALIGN_MASK	plr_system.h	21;"	d
MAX_UPLOAD_RETRY_COUNT	plr_tftp.c	16;"	d	file:
g_tftp_state	plr_tftp.c	/^struct tftp_state g_tftp_state;$/;"	v	typeref:struct:tftp_state
tftp_erase_count_upload	plr_tftp.c	/^int tftp_erase_count_upload(uchar *addr)$/;"	f
tftp_fw_upgrade	plr_tftp.c	/^void tftp_fw_upgrade(void)$/;"	f
tftp_power_monitor_upload	plr_tftp.c	/^ int tftp_power_monitor_upload(uchar *addr, uint len, uint req_length, uint type, bool is_dirty, uint index)$/;"	f
TFTP_BUF_SZ	plr_tftp.h	15;"	d
_PLR_TFTP_H_	plr_tftp.h	13;"	d
client_ip	plr_tftp.h	/^	char client_ip[16];$/;"	m	struct:tftp_state
file_path	plr_tftp.h	/^	char file_path[128];$/;"	m	struct:tftp_state
gateway_ip	plr_tftp.h	/^	char gateway_ip[16];$/;"	m	struct:tftp_state
mac_addr	plr_tftp.h	/^	char mac_addr[18];$/;"	m	struct:tftp_state
netmask	plr_tftp.h	/^	char netmask[16];$/;"	m	struct:tftp_state
option	plr_tftp.h	/^	uint option;$/;"	m	struct:tftp_state
server_ip	plr_tftp.h	/^	char server_ip[16];$/;"	m	struct:tftp_state
state	plr_tftp.h	/^	uint state;$/;"	m	struct:tftp_state
tftp_state	plr_tftp.h	/^struct tftp_state {$/;"	s
DEPTH_DAY	plr_tick_conversion.c	/^	DEPTH_DAY,$/;"	e	enum:__anon19	file:
DEPTH_HOUR	plr_tick_conversion.c	/^	DEPTH_HOUR,$/;"	e	enum:__anon19	file:
DEPTH_MIN	plr_tick_conversion.c	/^	DEPTH_MIN,$/;"	e	enum:__anon19	file:
DEPTH_MON	plr_tick_conversion.c	/^	DEPTH_MON$/;"	e	enum:__anon19	file:
DEPTH_MS	plr_tick_conversion.c	/^	DEPTH_MS,$/;"	e	enum:__anon19	file:
DEPTH_NS	plr_tick_conversion.c	/^	DEPTH_NS = 0,$/;"	e	enum:__anon19	file:
DEPTH_S	plr_tick_conversion.c	/^	DEPTH_S,$/;"	e	enum:__anon19	file:
DEPTH_US	plr_tick_conversion.c	/^	DEPTH_US,$/;"	e	enum:__anon19	file:
MAX_64BIT	plr_tick_conversion.c	26;"	d	file:
TICK_RES_NS	plr_tick_conversion.c	/^const u64	TICK_RES_NS  		= 52LL;			\/\/ uset is nano second$/;"	v
TICK_RES_NS	plr_tick_conversion.c	/^const u64 	TICK_RES_NS  		= 30518LL; 	\/\/ uset is nano second$/;"	v
TICK_RES_NS	plr_tick_conversion.c	/^const u64 	TICK_RES_NS  		= 30518LL;$/;"	v
TICK_RES_NS	plr_tick_conversion.c	/^const u64 	TICK_RES_NS  		= 41LL; 		\/\/ uset is nano second$/;"	v
TICK_RES_NS_INV	plr_tick_conversion.c	/^const u64	TICK_RES_NS_INV 	= 19200000LL;	\/\/ inverse of TICK_RES_NS	\/\/ 19.2 Mhz$/;"	v
TICK_RES_NS_INV	plr_tick_conversion.c	/^const u64 	TICK_RES_NS_INV  	= 24000000LL;	\/\/ inverse of TICK_RES_NS		\/\/ 24 Mhz$/;"	v
TICK_RES_NS_INV	plr_tick_conversion.c	/^const u64 	TICK_RES_NS_INV  	= 32768LL;	\/\/ inverse of TICK_RES_NS$/;"	v
TICK_RES_NS_INV	plr_tick_conversion.c	/^const u64 	TICK_RES_NS_INV  	= 32768LL;$/;"	v
get_div	plr_tick_conversion.c	/^static u64 get_div(int depth)$/;"	f	file:
get_msec2tick	plr_tick_conversion.c	/^u64 get_msec2tick(u32 msec)$/;"	f
get_nsec2tick	plr_tick_conversion.c	/^u64 get_nsec2tick(u32 nsec)$/;"	f
get_sec2tick	plr_tick_conversion.c	/^u64 get_sec2tick(u32 sec)$/;"	f
get_tick2msec	plr_tick_conversion.c	/^u32 get_tick2msec(u64 tick) $/;"	f
get_tick2nsec	plr_tick_conversion.c	/^u32 get_tick2nsec(u64 tick)$/;"	f
get_tick2sec	plr_tick_conversion.c	/^u32 get_tick2sec(u64 tick) $/;"	f
get_tick2usec	plr_tick_conversion.c	/^u32 get_tick2usec(u64 tick)$/;"	f
get_usec2tick	plr_tick_conversion.c	/^u64 get_usec2tick(u32 usec)$/;"	f
value_to_time	plr_tick_conversion.c	/^static u64 value_to_time(u64 value,$/;"	f	file:
PLR_TICK_CONVERSION_H_	plr_tick_conversion.h	3;"	d
FALSE	plr_type.h	91;"	d
FALSE	plr_type.h	92;"	d
NULL	plr_type.h	98;"	d
PLR_INIT_TB_ZERO	plr_type.h	88;"	d
PLR_INT_MAX	plr_type.h	81;"	d
PLR_INT_MIN	plr_type.h	82;"	d
PLR_LONGLONG_MAX	plr_type.h	85;"	d
PLR_LONGLONG_MIN	plr_type.h	86;"	d
PLR_LONG_MAX	plr_type.h	83;"	d
PLR_LONG_MIN	plr_type.h	84;"	d
TRUE	plr_type.h	94;"	d
TRUE	plr_type.h	95;"	d
_PLR_TYPE_H	plr_type.h	18;"	d
bool	plr_type.h	42;"	d
lbaint_t	plr_type.h	22;"	d
s32	plr_type.h	70;"	d
s64	plr_type.h	74;"	d
s8	plr_type.h	66;"	d
u32	plr_type.h	54;"	d
u64	plr_type.h	58;"	d
u8	plr_type.h	46;"	d
uchar	plr_type.h	34;"	d
uint	plr_type.h	30;"	d
uint64_t	plr_type.h	62;"	d
uint8_t	plr_type.h	50;"	d
ulong	plr_type.h	38;"	d
ushort	plr_type.h	26;"	d
CACHE	plr_verify.c	/^	CACHE,$/;"	e	enum:CACHE_PACKED	file:
CACHE_PACKED	plr_verify.c	/^enum CACHE_PACKED$/;"	g	file:
GET_CRASHED_IN_STEP	plr_verify.c	19;"	d	file:
LAST_PO	plr_verify.c	16;"	d	file:
NONE	plr_verify.c	/^	NONE = 0,$/;"	e	enum:CACHE_PACKED	file:
PACKED	plr_verify.c	/^	PACKED,$/;"	e	enum:CACHE_PACKED	file:
PREVIOUS_LAST_PO	plr_verify.c	17;"	d	file:
SET_CRASHED_IN_STEP	plr_verify.c	20;"	d	file:
_cache_or_packed_list	plr_verify.c	/^static enum CACHE_PACKED _cache_or_packed_list	= NONE;$/;"	v	typeref:enum:CACHE_PACKED	file:
_cached_request_count	plr_verify.c	/^static uint _cached_request_count = 0;$/;"	v	file:
_crashed_flag_in_each_step	plr_verify.c	/^static uchar _crashed_flag_in_each_step 	= 0;$/;"	v	file:
_current_verification_step	plr_verify.c	/^static int 	_current_verification_step 		= VERI_DEFAULT_STEP;$/;"	v	file:
_expected_boot_count	plr_verify.c	/^static uint	_expected_boot_count 			= 0;	$/;"	v	file:
_expected_loop_count	plr_verify.c	/^static uint	_expected_loop_count 			= 0;$/;"	v	file:
_finish_cal_last_lsn_in_cached_req	plr_verify.c	/^static bool _finish_cal_last_lsn_in_cached_req 	= FALSE;$/;"	v	file:
_finish_cal_last_lsn_in_packed_req	plr_verify.c	/^static bool _finish_cal_last_lsn_in_packed_req 	= FALSE;$/;"	v	file:
_is_erase_test	plr_verify.c	/^static bool _is_erase_test = FALSE;$/;"	v	file:
_packed_request_count	plr_verify.c	/^static uint _packed_request_count = 0;$/;"	v	file:
_predicted_cached_req_sectors	plr_verify.c	/^static uint _predicted_cached_req_sectors	 	= 0;$/;"	v	file:
_predicted_last_lsn_in_cached_req	plr_verify.c	/^static uint _predicted_last_lsn_in_cached_req 	= 0;$/;"	v	file:
_predicted_last_lsn_in_packed_req	plr_verify.c	/^static uint _predicted_last_lsn_in_packed_req 	= 0;$/;"	v	file:
_predicted_packed_req_sectors	plr_verify.c	/^static uint _predicted_packed_req_sectors	 	= 0;$/;"	v	file:
_print_crash_info	plr_verify.c	/^static struct Print_Crash_Func _print_crash_info ={	.default_step = print_default_step,$/;"	v	typeref:struct:Print_Crash_Func	file:
_request_cnt_after_last_PO	plr_verify.c	/^static int 	_request_cnt_after_last_PO		= PREVIOUS_LAST_PO;$/;"	v	file:
_state	plr_verify.c	/^static struct plr_state* 		_state;$/;"	v	typeref:struct:plr_state	file:
_unconfirmed_crash_info	plr_verify.c	/^static struct Unconfirmed_Info 	_unconfirmed_crash_info;$/;"	v	typeref:struct:Unconfirmed_Info	file:
_veri_request_cnt_unconfirmed	plr_verify.c	/^static uint	_veri_request_cnt_unconfirmed	= 0;$/;"	v	file:
_verification_result	plr_verify.c	/^static int 	_verification_result = VERI_NOERR;$/;"	v	file:
_verification_status	plr_verify.c	/^static enum VERIFICATION_STATUS _verification_status;$/;"	v	typeref:enum:VERIFICATION_STATUS	file:
_verify	plr_verify.c	/^VERIFY_FUNC _verify = NULL;$/;"	v
_verify_function	plr_verify.c	/^static struct Verification_Func _verify_function ={ .normal_verification = verify_normal_status,$/;"	v	typeref:struct:Verification_Func	file:
check_partial_writing	plr_verify.c	/^static int check_partial_writing(uchar *buf, uint start_lsn, uint request_sectors)$/;"	f	file:
classify_partial_type	plr_verify.c	/^static uint classify_partial_type(uchar *buf, uint pages)$/;"	f	file:
do_verify	plr_verify.c	/^int do_verify(uchar *buf, uint lsn, uint request_sectors, uint request_count, uint next_addr)$/;"	f
make_expected_header	plr_verify.c	/^static void make_expected_header(uchar *buf, uint req_seq_num, uint req_start, uint req_len, uint page_index, uint next_start_sector, bool is_commit_pg)$/;"	f	file:
make_expected_header_data	plr_verify.c	/^static void make_expected_header_data(uchar * buf, uint req_start, uint req_len, uint req_seq_num, uint next_start_sector, bool is_commit)$/;"	f	file:
make_origin_chunk	plr_verify.c	/^static void make_origin_chunk(uchar* buf, uint lsn, uint request_sectors, uint request_num, uint next_lsn)$/;"	f	file:
memorycmp	plr_verify.c	/^static int memorycmp(const void * cs,const void * ct,size_t count)$/;"	f	file:
save_test_info	plr_verify.c	/^void save_test_info(struct plr_state *state)$/;"	f
set_last_lsn_in_cached_list	plr_verify.c	/^static void set_last_lsn_in_cached_list(uint lsn, uint request_sectors, int request_count)$/;"	f	file:
set_last_lsn_in_packed_list	plr_verify.c	/^static void set_last_lsn_in_packed_list(uint lsn, uint request_sectors, int request_count)$/;"	f	file:
verify_apply_result	plr_verify.c	/^void verify_apply_result(struct plr_state* state)$/;"	f
verify_check_page	plr_verify.c	/^int verify_check_page(struct plr_header * header_info, uint lsn)$/;"	f
verify_check_pages_lsn_crc_loop	plr_verify.c	/^int verify_check_pages_lsn_crc_loop(uchar *buf, uint start_lsn, uint end_lsn, bool is_expected_loop, uint expected_loop)$/;"	f
verify_check_random_zone_only_lsn_crc	plr_verify.c	/^int verify_check_random_zone_only_lsn_crc(uchar *buf)$/;"	f
verify_find_chunk	plr_verify.c	/^int verify_find_chunk(uchar *buf, uint start_lsn, uint end_lsn, uint expected_loop, uint *chunk_start, uint *pages_in_chunk, bool *flag_find)$/;"	f
verify_get_boot_count	plr_verify.c	/^uint verify_get_boot_count(void)$/;"	f
verify_get_crash_num	plr_verify.c	/^int verify_get_crash_num(struct plr_state *state)$/;"	f
verify_get_current_step	plr_verify.c	/^enum VERIFICATION_STEP verify_get_current_step(void)$/;"	f
verify_get_error_num	plr_verify.c	/^int verify_get_error_num(struct plr_state *state)$/;"	f
verify_get_loop_count	plr_verify.c	/^uint verify_get_loop_count(void)$/;"	f
verify_get_predicted_last_lsn_previous_boot	plr_verify.c	/^uint verify_get_predicted_last_lsn_previous_boot(void)$/;"	f
verify_get_result	plr_verify.c	/^int verify_get_result(struct plr_state *state)$/;"	f
verify_get_status	plr_verify.c	/^enum VERIFICATION_STATUS verify_get_status(void)$/;"	f
verify_init	plr_verify.c	/^void verify_init(struct plr_state* state, bool is_erase_test)$/;"	f
verify_init_func	plr_verify.c	/^void verify_init_func(struct Verification_Func verify_func)$/;"	f
verify_init_print_func	plr_verify.c	/^void verify_init_print_func(struct Print_Crash_Func print_crash_info)$/;"	f
verify_load_crash_info	plr_verify.c	/^void verify_load_crash_info(struct plr_state *state)$/;"	f
verify_normal_status	plr_verify.c	/^int verify_normal_status(uchar *buf, uint start_lsn, uint request_sectors, uint request_count, uint next_addr)$/;"	f
verify_print_crash_info	plr_verify.c	/^void verify_print_crash_info(uchar *buf, struct plr_state* state)$/;"	f
verify_report_result	plr_verify.c	/^int verify_report_result(struct plr_state* state)$/;"	f
verify_reset	plr_verify.c	/^void verify_reset(uint	expected_loop, uint expected_boot)$/;"	f
verify_save_crash_info	plr_verify.c	/^void verify_save_crash_info(void)$/;"	f
verify_set_boot_count	plr_verify.c	/^void verify_set_boot_count(uint expected_boot)$/;"	f
verify_set_current_step	plr_verify.c	/^void verify_set_current_step(enum VERIFICATION_STEP step)$/;"	f
verify_set_loop_count	plr_verify.c	/^void verify_set_loop_count(uint expected_loop)$/;"	f
verify_set_result	plr_verify.c	/^void verify_set_result(enum VERI_ERROR_NUM result, uint lsn)$/;"	f
verify_set_status	plr_verify.c	/^void verify_set_status(enum VERIFICATION_STATUS status)$/;"	f
verify_set_unexpected_info	plr_verify.c	/^void verify_set_unexpected_info(uint lsn, uint request_sectors, struct plr_header *expected_data, struct plr_header *crashed_data, uchar *crash_pages_in_request)$/;"	f
verify_unconfirmed_status	plr_verify.c	/^int verify_unconfirmed_status(uchar *buf, uint start_lsn, uint request_sectors, uint request_count, uint next_addr)$/;"	f
EXPECTED	plr_verify.h	4;"	d
PRINT_CRASH_INFO	plr_verify.h	/^typedef void (*PRINT_CRASH_INFO)(uchar *, struct plr_state *, struct Unconfirmed_Info *);$/;"	t
Print_Crash_Func	plr_verify.h	/^struct Print_Crash_Func$/;"	s
UNEXPECTED	plr_verify.h	5;"	d
Unconfirmed_Info	plr_verify.h	/^struct Unconfirmed_Info$/;"	s
VERIFICATION_STATUS	plr_verify.h	/^enum VERIFICATION_STATUS$/;"	g
VERIFICATION_STEP	plr_verify.h	/^enum VERIFICATION_STEP$/;"	g
VERIFY_DEBUG_MSG	plr_verify.h	11;"	d
VERIFY_DEBUG_MSG	plr_verify.h	13;"	d
VERIFY_FUNC	plr_verify.h	/^typedef int (*VERIFY_FUNC)(uchar *, uint ,uint ,uint ,uint);$/;"	t
VERI_CHECKING_LSN_CRC_STEP	plr_verify.h	/^	VERI_CHECKING_LSN_CRC_STEP,$/;"	e	enum:VERIFICATION_STEP
VERI_DEFAULT_STEP	plr_verify.h	/^	VERI_DEFAULT_STEP = 1,$/;"	e	enum:VERIFICATION_STEP
VERI_DONT_CARE	plr_verify.h	/^	VERI_DONT_CARE	= 0,$/;"	e	enum:VERI_ERROR_NUM
VERI_EIO	plr_verify.h	/^	VERI_EIO		= 1,$/;"	e	enum:VERI_ERROR_NUM
VERI_EPARTIAL	plr_verify.h	/^	VERI_EPARTIAL	= 6,$/;"	e	enum:VERI_ERROR_NUM
VERI_EREQUEST	plr_verify.h	/^	VERI_EREQUEST	= 5,$/;"	e	enum:VERI_ERROR_NUM
VERI_ERROR_NUM	plr_verify.h	/^enum VERI_ERROR_NUM$/;"	g
VERI_EXTRA_STEP	plr_verify.h	/^	VERI_EXTRA_STEP,$/;"	e	enum:VERIFICATION_STEP
VERI_NOERR	plr_verify.h	/^	VERI_NOERR 		= 0,$/;"	e	enum:VERI_ERROR_NUM
VERI_REQUEST_CNT_UNCONFIRMED_STATUS	plr_verify.h	7;"	d
VERI_STATUS_CRASH	plr_verify.h	/^	VERI_STATUS_CRASH,$/;"	e	enum:VERIFICATION_STATUS
VERI_STATUS_END	plr_verify.h	/^	VERI_STATUS_END = 20000,$/;"	e	enum:VERIFICATION_STATUS
VERI_STATUS_FINISH	plr_verify.h	/^	VERI_STATUS_FINISH,$/;"	e	enum:VERIFICATION_STATUS
VERI_STATUS_NORMAL	plr_verify.h	/^	VERI_STATUS_NORMAL = 0,$/;"	e	enum:VERIFICATION_STATUS
VERI_STATUS_UNCONFIRMED	plr_verify.h	/^	VERI_STATUS_UNCONFIRMED,$/;"	e	enum:VERIFICATION_STATUS
Verification_Func	plr_verify.h	/^struct Verification_Func$/;"	s
__VERIFY__	plr_verify.h	2;"	d
checking_lsn_crc_step	plr_verify.h	/^	PRINT_CRASH_INFO checking_lsn_crc_step;$/;"	m	struct:Print_Crash_Func
crash_pages_in_chunk	plr_verify.h	/^	uchar *crash_pages_in_chunk;$/;"	m	struct:Unconfirmed_Info
crashed_data	plr_verify.h	/^	struct plr_header crashed_data;	$/;"	m	struct:Unconfirmed_Info	typeref:struct:Unconfirmed_Info::plr_header
current_boot_count	plr_verify.h	/^	uint current_boot_count;$/;"	m	struct:Unconfirmed_Info
current_loop_count	plr_verify.h	/^	uint current_loop_count;$/;"	m	struct:Unconfirmed_Info
default_step	plr_verify.h	/^	PRINT_CRASH_INFO default_step;$/;"	m	struct:Print_Crash_Func
expected_data	plr_verify.h	/^	struct plr_header expected_data;$/;"	m	struct:Unconfirmed_Info	typeref:struct:Unconfirmed_Info::plr_header
extra_step	plr_verify.h	/^	PRINT_CRASH_INFO extra_step;$/;"	m	struct:Print_Crash_Func
normal_verification	plr_verify.h	/^	VERIFY_FUNC normal_verification;$/;"	m	struct:Verification_Func
request_sectors_cnt	plr_verify.h	/^	uint request_sectors_cnt;$/;"	m	struct:Unconfirmed_Info
request_start_lsn	plr_verify.h	/^	uint request_start_lsn;$/;"	m	struct:Unconfirmed_Info
unconfirmed_verification	plr_verify.h	/^	VERIFY_FUNC unconfirmed_verification;$/;"	m	struct:Verification_Func
DEFAULT_CRASH_ALLOC_COUNT	plr_verify_log.c	21;"	d	file:
LOG_DEBUG_MSG	plr_verify_log.c	10;"	d	file:
LOG_DEBUG_MSG	plr_verify_log.c	8;"	d	file:
LOG_SAVE_MSG	plr_verify_log.c	15;"	d	file:
LOG_SAVE_MSG	plr_verify_log.c	17;"	d	file:
MAX_NORMAL_REQUEST	plr_verify_log.c	22;"	d	file:
SEPARATOR_REQUEST	plr_verify_log.c	23;"	d	file:
_current_step	plr_verify_log.c	/^static enum VERIFICATION_STEP _current_step;$/;"	v	typeref:enum:VERIFICATION_STEP	file:
_log_request_list	plr_verify_log.c	/^static struct Verify_Request_List	*_log_request_list 	= NULL;$/;"	v	typeref:struct:Verify_Request_List	file:
_normal_request_count_after_crash	plr_verify_log.c	/^static uint _normal_request_count_after_crash = 0;$/;"	v	file:
_normal_request_count_before_crash	plr_verify_log.c	/^static uint _normal_request_count_before_crash = 0;$/;"	v	file:
_step1_log_manager_list	plr_verify_log.c	/^static struct Verify_Log_Manager _step1_log_manager_list = {.head = NULL, .tail = NULL};$/;"	v	typeref:struct:Verify_Log_Manager	file:
_step2_log_manager_list	plr_verify_log.c	/^static struct Verify_Log_Manager _step2_log_manager_list = {.head = NULL, .tail = NULL};$/;"	v	typeref:struct:Verify_Log_Manager	file:
_step3_log_manager_list	plr_verify_log.c	/^static struct Verify_Log_Manager _step3_log_manager_list = {.head = NULL, .tail = NULL};$/;"	v	typeref:struct:Verify_Log_Manager	file:
destory_request_list	plr_verify_log.c	/^static void destory_request_list(struct Verify_Request_List *list)$/;"	f	file:
destroy_manager_list	plr_verify_log.c	/^static void destroy_manager_list(struct Verify_Log_Manager *step)$/;"	f	file:
insert_manager_list	plr_verify_log.c	/^static void insert_manager_list(struct Verify_Request_List **request_list, enum VERIFICATION_STEP current_step)$/;"	f	file:
insert_request_list	plr_verify_log.c	/^static void insert_request_list(struct Verify_Request_Info *info, enum VERI_ERROR_NUM status)$/;"	f	file:
load_request_list	plr_verify_log.c	/^static int load_request_list(uchar *buf, uint start_sector, uint length)$/;"	f	file:
print_manager_list	plr_verify_log.c	/^static void print_manager_list(uchar *buf, struct plr_state *state, struct Verify_Log_Manager *step)$/;"	f	file:
print_request_list	plr_verify_log.c	/^static void print_request_list(uchar *buf, struct plr_state *state, struct Verify_Request_Info *info)$/;"	f	file:
realloc_request_list	plr_verify_log.c	/^static void realloc_request_list(struct Verify_Request_List **history_request_list)$/;"	f	file:
save_manager_list	plr_verify_log.c	/^static int save_manager_list(uchar *buf, struct Verify_Log_Manager *step, uint *sector_num)$/;"	f	file:
save_request_list	plr_verify_log.c	/^static int save_request_list(uchar *buf, struct Verify_Request_Info *info)$/;"	f	file:
verify_destory_log	plr_verify_log.c	/^void verify_destory_log(void)$/;"	f
verify_init_log	plr_verify_log.c	/^void verify_init_log(void)$/;"	f
verify_insert_request_info	plr_verify_log.c	/^void verify_insert_request_info(uint lsn, uint sectors, uchar *crash_pages_in_request, enum VERI_ERROR_NUM status)$/;"	f
verify_load_log	plr_verify_log.c	/^void verify_load_log(void)$/;"	f
verify_print_log	plr_verify_log.c	/^void verify_print_log(uchar *buf, struct plr_state *state)$/;"	f
verify_print_step1	plr_verify_log.c	/^void verify_print_step1(uchar *buf, struct plr_state *state)$/;"	f
verify_print_step2	plr_verify_log.c	/^void verify_print_step2(uchar *buf, struct plr_state *state)$/;"	f
verify_print_step3	plr_verify_log.c	/^void verify_print_step3(uchar *buf, struct plr_state *state)$/;"	f
verify_save_log	plr_verify_log.c	/^void verify_save_log(void)$/;"	f
Verify_Log_Manager	plr_verify_log.h	/^struct Verify_Log_Manager$/;"	s
Verify_Request_Info	plr_verify_log.h	/^struct Verify_Request_Info$/;"	s
Verify_Request_List	plr_verify_log.h	/^struct Verify_Request_List$/;"	s
__VERIFY_LOG__	plr_verify_log.h	2;"	d
crash_pages_in_request	plr_verify_log.h	/^	uchar *crash_pages_in_request;$/;"	m	struct:Verify_Request_Info
crash_pointer	plr_verify_log.h	/^	struct Verify_Request_Info **crash_pointer;$/;"	m	struct:Verify_Request_List	typeref:struct:Verify_Request_List::Verify_Request_Info
crash_request_count	plr_verify_log.h	/^	uint crash_request_count;	$/;"	m	struct:Verify_Request_List
head	plr_verify_log.h	/^	struct Verify_Request_Info *head;$/;"	m	struct:Verify_Request_List	typeref:struct:Verify_Request_List::Verify_Request_Info
head	plr_verify_log.h	/^	struct Verify_Request_List *head;$/;"	m	struct:Verify_Log_Manager	typeref:struct:Verify_Log_Manager::Verify_Request_List
next	plr_verify_log.h	/^	struct Verify_Request_Info *next;$/;"	m	struct:Verify_Request_Info	typeref:struct:Verify_Request_Info::Verify_Request_Info
next	plr_verify_log.h	/^	struct Verify_Request_List *next;$/;"	m	struct:Verify_Request_List	typeref:struct:Verify_Request_List::Verify_Request_List
request_count	plr_verify_log.h	/^	uint request_count;	$/;"	m	struct:Verify_Request_List
request_sectors	plr_verify_log.h	/^	uint request_sectors;	$/;"	m	struct:Verify_Request_Info
request_start_lsn	plr_verify_log.h	/^	uint request_start_lsn;$/;"	m	struct:Verify_Request_Info
request_status	plr_verify_log.h	/^	enum VERI_ERROR_NUM request_status;$/;"	m	struct:Verify_Request_Info	typeref:enum:Verify_Request_Info::VERI_ERROR_NUM
tail	plr_verify_log.h	/^	struct Verify_Request_Info *tail;$/;"	m	struct:Verify_Request_List	typeref:struct:Verify_Request_List::Verify_Request_Info
tail	plr_verify_log.h	/^	struct Verify_Request_List *tail;$/;"	m	struct:Verify_Log_Manager	typeref:struct:Verify_Log_Manager::Verify_Request_List
print_checking_lsn_crc_step	plr_verify_report.c	/^void print_checking_lsn_crc_step(uchar *buf, struct plr_state *state, struct Unconfirmed_Info *crash_info)$/;"	f
print_chunk_simplly	plr_verify_report.c	/^void print_chunk_simplly(struct plr_state *state, struct Unconfirmed_Info *crash_info)$/;"	f
print_crash_status_header_info	plr_verify_report.c	/^void print_crash_status_header_info(struct Unconfirmed_Info *crash_info)$/;"	f
print_default_step	plr_verify_report.c	/^void print_default_step(uchar *buf, struct plr_state *state, struct Unconfirmed_Info *crash_info)$/;"	f
print_extra_step	plr_verify_report.c	/^void print_extra_step(uchar *buf, struct plr_state *state, struct Unconfirmed_Info *crash_info)$/;"	f
__VERIFY_REPORT__	plr_verify_report.h	2;"	d
CAL_RANDOM_SECTORS	plr_write_rand.c	51;"	d	file:
SECTORS_TO_PAGE	plr_write_rand.c	50;"	d	file:
g_index	plr_write_rand.c	/^static uint g_index;$/;"	v	file:
random_sector_count	plr_write_rand.c	/^uint random_sector_count(int num)$/;"	f
random_sector_count1	plr_write_rand.c	/^static uint random_sector_count1(void) $/;"	f	file:
random_sector_count2	plr_write_rand.c	/^static uint random_sector_count2(void) $/;"	f	file:
random_sector_count3	plr_write_rand.c	/^static uint random_sector_count3(void) $/;"	f	file:
random_sector_count4	plr_write_rand.c	/^static uint random_sector_count4(void) $/;"	f	file:
random_sector_count5	plr_write_rand.c	/^static uint random_sector_count5(void)$/;"	f	file:
random_sector_count6	plr_write_rand.c	/^static uint random_sector_count6(void) $/;"	f	file:
random_sector_count7	plr_write_rand.c	/^static uint random_sector_count7(void)$/;"	f	file:
random_sector_count_min_max	plr_write_rand.c	/^inline static uint random_sector_count_min_max(uint min_sectors, uint max_sectors)$/;"	f	file:
state	plr_write_rand.c	/^static unsigned int state[16];$/;"	v	file:
well512_write_rand	plr_write_rand.c	/^unsigned int well512_write_rand(void)$/;"	f
well512_write_seed	plr_write_rand.c	/^void well512_write_seed(unsigned int nSeed)$/;"	f
main	plrprepare.c	/^int main(int argc, char *argv[])$/;"	f
main	plrtest.c	/^int main(int argc, char *argv[])$/;"	f
PAGE_PER_GB	test_case\plr_case.h	15;"	d
PAGE_PER_MB	test_case\plr_case.h	16;"	d
SECONDS_PER_DAY	test_case\plr_case.h	17;"	d
SECONDS_PER_HOUR	test_case\plr_case.h	18;"	d
SECONDS_PER_MINUTE	test_case\plr_case.h	19;"	d
_PLR_CASE_H_	test_case\plr_case.h	13;"	d
_end_time	test_case\plr_daxx0000.c	/^static uint _end_time = 0;$/;"	v	file:
_start_time	test_case\plr_daxx0000.c	/^static uint _start_time = 0;$/;"	v	file:
_total_writing_page	test_case\plr_daxx0000.c	/^static unsigned long long _total_writing_page = 0;$/;"	v	file:
_total_writing_time	test_case\plr_daxx0000.c	/^static unsigned long long _total_writing_time = 0;$/;"	v	file:
_writing_sequence	test_case\plr_daxx0000.c	/^static bool _writing_sequence = TRUE;$/;"	v	file:
get_request_length	test_case\plr_daxx0000.c	/^static uint get_request_length(void)$/;"	f	file:
get_skip_length	test_case\plr_daxx0000.c	/^static uint get_skip_length(void) $/;"	f	file:
init_pattern_1_2	test_case\plr_daxx0000.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_daxx_0000	test_case\plr_daxx0000.c	/^int initialize_daxx_0000( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
pattern	test_case\plr_daxx0000.c	/^static int pattern(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
print_daxx_0000	test_case\plr_daxx0000.c	/^static void print_daxx_0000(void)$/;"	f	file:
print_statistics	test_case\plr_daxx0000.c	/^static void print_statistics(void)$/;"	f	file:
read_daxx_0000	test_case\plr_daxx0000.c	/^int read_daxx_0000( uchar * buf, uint test_start_sector, uint test_sector_length)$/;"	f
write_daxx_0000	test_case\plr_daxx0000.c	/^int write_daxx_0000( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
_end_time	test_case\plr_daxx0001.c	/^static uint _end_time = 0;$/;"	v	file:
_start_time	test_case\plr_daxx0001.c	/^static uint _start_time = 0;$/;"	v	file:
_total_writing_page	test_case\plr_daxx0001.c	/^static long long _total_writing_page;$/;"	v	file:
_total_writing_time	test_case\plr_daxx0001.c	/^static long long _total_writing_time;$/;"	v	file:
_writing_page_per_loop	test_case\plr_daxx0001.c	/^static unsigned long long _writing_page_per_loop;$/;"	v	file:
_writing_sequence	test_case\plr_daxx0001.c	/^static bool _writing_sequence = TRUE;$/;"	v	file:
get_request_length	test_case\plr_daxx0001.c	/^static uint get_request_length(void)$/;"	f	file:
init_pattern_1_2	test_case\plr_daxx0001.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_daxx_0001	test_case\plr_daxx0001.c	/^int initialize_daxx_0001( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
pattern1	test_case\plr_daxx0001.c	/^static int pattern1(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
print_daxx_0001	test_case\plr_daxx0001.c	/^static void print_daxx_0001(void)$/;"	f	file:
print_statistics	test_case\plr_daxx0001.c	/^static void print_statistics(void)$/;"	f	file:
read_daxx_0001	test_case\plr_daxx0001.c	/^int read_daxx_0001(uchar * buf, uint test_start_sector, uint test_sector_length)$/;"	f
write_daxx_0001	test_case\plr_daxx0001.c	/^int write_daxx_0001( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
_end_time	test_case\plr_daxx0002.c	/^static uint _end_time = 0;$/;"	v	file:
_start_time	test_case\plr_daxx0002.c	/^static uint _start_time = 0;$/;"	v	file:
_total_writing_page	test_case\plr_daxx0002.c	/^static unsigned long long _total_writing_page = 0;$/;"	v	file:
_total_writing_time	test_case\plr_daxx0002.c	/^static unsigned long long _total_writing_time = 0;$/;"	v	file:
_writing_page_per_loop	test_case\plr_daxx0002.c	/^static unsigned long long _writing_page_per_loop;$/;"	v	file:
_writing_sequence	test_case\plr_daxx0002.c	/^static bool _writing_sequence = TRUE;$/;"	v	file:
get_request_length	test_case\plr_daxx0002.c	/^static uint get_request_length(void)$/;"	f	file:
get_skip_length	test_case\plr_daxx0002.c	/^static uint get_skip_length(void) $/;"	f	file:
init_pattern_1_2	test_case\plr_daxx0002.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_daxx_0002	test_case\plr_daxx0002.c	/^int initialize_daxx_0002( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
pattern1	test_case\plr_daxx0002.c	/^static int pattern1(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
pattern2	test_case\plr_daxx0002.c	/^static int pattern2(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
print_daxx_0000	test_case\plr_daxx0002.c	/^static void print_daxx_0000(void)$/;"	f	file:
print_statistics	test_case\plr_daxx0002.c	/^static void print_statistics(void)$/;"	f	file:
read_daxx_0002	test_case\plr_daxx0002.c	/^int read_daxx_0002( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
write_daxx_0002	test_case\plr_daxx0002.c	/^int write_daxx_0002( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
MAX_REQUST_SECTORS	test_case\plr_daxx0003_4.c	26;"	d	file:
MAX_TEST_CYCLE	test_case\plr_daxx0003_4.c	28;"	d	file:
MIN_REQUST_SECTORS	test_case\plr_daxx0003_4.c	24;"	d	file:
PERF_READ	test_case\plr_daxx0003_4.c	/^	PERF_READ = 0,$/;"	e	enum:__anon20	file:
PERF_WRITE	test_case\plr_daxx0003_4.c	/^	PERF_WRITE,$/;"	e	enum:__anon20	file:
PRE_CLEAN	test_case\plr_daxx0003_4.c	/^	PRE_CLEAN = 0,$/;"	e	enum:__anon21	file:
PRE_DIRTY	test_case\plr_daxx0003_4.c	/^	PRE_DIRTY,$/;"	e	enum:__anon21	file:
RANDOM_ZONE_COUNT	test_case\plr_daxx0003_4.c	27;"	d	file:
_perf_cycle	test_case\plr_daxx0003_4.c	/^static u32 _perf_cycle;$/;"	v	file:
_total_writing_time	test_case\plr_daxx0003_4.c	/^static u64 _total_writing_time = 0;$/;"	v	file:
_writing_page_per_loop	test_case\plr_daxx0003_4.c	/^static unsigned long long _writing_page_per_loop;$/;"	v	file:
_writing_sequence	test_case\plr_daxx0003_4.c	/^static bool _writing_sequence = TRUE;$/;"	v	file:
b_random_test	test_case\plr_daxx0003_4.c	/^	u8	b_random_test;$/;"	m	struct:__anon24	file:
b_using_random_zone	test_case\plr_daxx0003_4.c	/^	u8	b_using_random_zone;$/;"	m	struct:__anon24	file:
caculate_kb_per_sec	test_case\plr_daxx0003_4.c	/^static u32 caculate_kb_per_sec(u32 total_size, u64 elapsed_ticks)$/;"	f	file:
data_buff	test_case\plr_daxx0003_4.c	/^	u8 *data_buff;$/;"	m	struct:__anon24	file:
dirty_pattern	test_case\plr_daxx0003_4.c	/^static int dirty_pattern(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
do_perf_test	test_case\plr_daxx0003_4.c	/^static int do_perf_test(uchar *buf, uint start_lsn, u32 test_area_len)$/;"	f	file:
do_perf_test_io	test_case\plr_daxx0003_4.c	/^static ulong do_perf_test_io(perf_static_test_s *stat_test, perf_io_e RW, u64 *elapsed_ticks)$/;"	f	file:
get_request_length	test_case\plr_daxx0003_4.c	/^static uint get_request_length(void)$/;"	f	file:
get_start_sector	test_case\plr_daxx0003_4.c	/^static u32 get_start_sector(perf_static_test_s *stat_test, int index)$/;"	f	file:
init_pattern_1_2	test_case\plr_daxx0003_4.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_daxx_0003_4	test_case\plr_daxx0003_4.c	/^int initialize_daxx_0003_4( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
make_request_table	test_case\plr_daxx0003_4.c	/^static int make_request_table(perf_static_test_s *stat_test, int req_size, int file_size, int brandom)$/;"	f	file:
pattern1	test_case\plr_daxx0003_4.c	/^static int pattern1(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
pattern2	test_case\plr_daxx0003_4.c	/^static int pattern2(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
perf_io_e	test_case\plr_daxx0003_4.c	/^} perf_io_e;$/;"	t	typeref:enum:__anon20	file:
perf_rand_zone	test_case\plr_daxx0003_4.c	/^	perf_random_zone_s perf_rand_zone;$/;"	m	struct:__anon24	file:
perf_random_zone_s	test_case\plr_daxx0003_4.c	/^} perf_random_zone_s;$/;"	t	typeref:struct:__anon22	file:
perf_static_test_s	test_case\plr_daxx0003_4.c	/^} perf_static_test_s;$/;"	t	typeref:struct:__anon24	file:
perf_test_request	test_case\plr_daxx0003_4.c	/^static int perf_test_request(perf_static_test_s *stat_test)$/;"	f	file:
perf_ticks	test_case\plr_daxx0003_4.c	/^	perf_ticks_s perf_ticks;$/;"	m	struct:__anon24	file:
perf_ticks_s	test_case\plr_daxx0003_4.c	/^} perf_ticks_s;$/;"	t	typeref:struct:__anon23	file:
pre_condition_e	test_case\plr_daxx0003_4.c	/^} pre_condition_e;$/;"	t	typeref:enum:__anon21	file:
ran_read_ticks	test_case\plr_daxx0003_4.c	/^	u64 ran_read_ticks;$/;"	m	struct:__anon23	file:
ran_write_ticks	test_case\plr_daxx0003_4.c	/^	u64 ran_write_ticks;$/;"	m	struct:__anon23	file:
read_daxx_0003_4	test_case\plr_daxx0003_4.c	/^int read_daxx_0003_4( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
release_random_table	test_case\plr_daxx0003_4.c	/^static int release_random_table(perf_static_test_s *stat_test)$/;"	f	file:
req_count	test_case\plr_daxx0003_4.c	/^	u32 req_count;			\/\/ number of sector$/;"	m	struct:__anon24	file:
req_size	test_case\plr_daxx0003_4.c	/^	u32 req_size;$/;"	m	struct:__anon24	file:
req_table	test_case\plr_daxx0003_4.c	/^	u32 *req_table;			\/\/ request start address table$/;"	m	struct:__anon24	file:
select_random_zone	test_case\plr_daxx0003_4.c	/^static int select_random_zone(perf_random_zone_s *ran_zone_info, u32 total_zone)$/;"	f	file:
selected_zone_cnt	test_case\plr_daxx0003_4.c	/^	u32 selected_zone_cnt;$/;"	m	struct:__anon22	file:
sq_read_ticks	test_case\plr_daxx0003_4.c	/^	u64 sq_read_ticks;$/;"	m	struct:__anon23	file:
sq_write_ticks	test_case\plr_daxx0003_4.c	/^	u64 sq_write_ticks;$/;"	m	struct:__anon23	file:
start_addr	test_case\plr_daxx0003_4.c	/^	u32 start_addr[RANDOM_ZONE_COUNT];$/;"	m	struct:__anon22	file:
start_lsn	test_case\plr_daxx0003_4.c	/^	u32 start_lsn;			\/\/ sector unit$/;"	m	struct:__anon24	file:
start_perf_test	test_case\plr_daxx0003_4.c	/^static int start_perf_test(uchar *buf, uint start_lsn, pre_condition_e condition)$/;"	f	file:
test_area_length	test_case\plr_daxx0003_4.c	/^	u32 test_area_length;	\/\/ sector unit$/;"	m	struct:__anon24	file:
write_daxx_0003_4	test_case\plr_daxx0003_4.c	/^int write_daxx_0003_4( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
ADDITIONAL_DAYS_PER_1K	test_case\plr_daxx0008.c	343;"	d	file:
BUFFERS_PER_TEST_AREA	test_case\plr_daxx0008.c	75;"	d	file:
BUFFERS_PER_ZONE	test_case\plr_daxx0008.c	72;"	d	file:
BUFFER_SIZE	test_case\plr_daxx0008.c	57;"	d	file:
BYTES_PER_BUFFER	test_case\plr_daxx0008.c	61;"	d	file:
BYTES_PER_PAGE	test_case\plr_daxx0008.c	68;"	d	file:
BYTES_PER_SECTOR	test_case\plr_daxx0008.c	64;"	d	file:
BYTES_PER_TEST_AREA	test_case\plr_daxx0008.c	63;"	d	file:
CHUNK_SIZE	test_case\plr_daxx0008.c	50;"	d	file:
COMPARE_FIRST_4BYTE_ONLY	test_case\plr_daxx0008.c	104;"	d	file:
INTENDED_CRASH_PAGE	test_case\plr_daxx0008.c	116;"	d	file:
INTENDED_CRASH_WORD	test_case\plr_daxx0008.c	117;"	d	file:
PAGES_PER_BUFFER	test_case\plr_daxx0008.c	76;"	d	file:
PAGES_PER_TEST_AREA	test_case\plr_daxx0008.c	73;"	d	file:
PAGES_PER_ZONE	test_case\plr_daxx0008.c	70;"	d	file:
RD_ERR_INVALID_ZONE_NUMBER	test_case\plr_daxx0008.c	108;"	d	file:
RD_ERR_READ_IO_FAILED	test_case\plr_daxx0008.c	109;"	d	file:
RD_ERR_READ_VERIFY_FAILED	test_case\plr_daxx0008.c	106;"	d	file:
RD_ERR_WRITE_FAILED	test_case\plr_daxx0008.c	107;"	d	file:
RD_MAGIC_NUMBER	test_case\plr_daxx0008.c	111;"	d	file:
RD_MAGIC_NUMBER_INTENSIVE_CRASH	test_case\plr_daxx0008.c	115;"	d	file:
RD_PAGES	test_case\plr_daxx0008.c	93;"	d	file:
RD_PAGES	test_case\plr_daxx0008.c	99;"	d	file:
RD_REPEAT_COUNT	test_case\plr_daxx0008.c	100;"	d	file:
RD_REPEAT_COUNT	test_case\plr_daxx0008.c	94;"	d	file:
SECTORS_PER_BUFFER	test_case\plr_daxx0008.c	66;"	d	file:
SECTORS_PER_PAGE	test_case\plr_daxx0008.c	67;"	d	file:
SECTORS_PER_TEST_AREA	test_case\plr_daxx0008.c	74;"	d	file:
SECTORS_PER_ZONE	test_case\plr_daxx0008.c	71;"	d	file:
SJD_CAUSE_INTENDED_CRASH	test_case\plr_daxx0008.c	95;"	d	file:
WORDS_PER_BUFFER	test_case\plr_daxx0008.c	62;"	d	file:
WORDS_PER_PAGE	test_case\plr_daxx0008.c	69;"	d	file:
WORDS_PER_SECTOR	test_case\plr_daxx0008.c	65;"	d	file:
_rd_crash_info	test_case\plr_daxx0008.c	/^static read_disturb_crash_info_s _rd_crash_info[1];	\/\/ read_disturb_crash_info;$/;"	v	file:
boot_cnt	test_case\plr_daxx0008.c	/^	int					boot_cnt;		\/\/ boot count$/;"	m	struct:read_disturb_crash_info	file:
caculate_kb_per_sec	test_case\plr_daxx0008.c	/^static u32 caculate_kb_per_sec(u32 total_size, u64 elapsed_ticks)$/;"	f	file:
compare_buffer	test_case\plr_daxx0008.c	/^static int compare_buffer(const u32* buf_ref, u32* buf, int word_len, int* word_pos)$/;"	f	file:
err_code	test_case\plr_daxx0008.c	/^	int					err_code;		\/\/ error code, reserved$/;"	m	struct:read_disturb_crash_info	file:
extra_verification	test_case\plr_daxx0008.c	/^static int extra_verification(uchar *buf, struct plr_state *state)	\/\/ 8 MB read buffer$/;"	f	file:
fill_read_disturb_area	test_case\plr_daxx0008.c	/^static int fill_read_disturb_area( void )$/;"	f	file:
init_pattern_1_2	test_case\plr_daxx0008.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_daxx_0008	test_case\plr_daxx0008.c	/^int initialize_daxx_0008( uchar * buf, uint test_area_start, uint test_area_length )$/;"	f
initialize_dummy	test_case\plr_daxx0008.c	/^int initialize_dummy( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
memory_dump	test_case\plr_daxx0008.c	/^static void memory_dump(u32* p0, int words)$/;"	f	file:
pattern1_interleaving	test_case\plr_daxx0008.c	/^static int pattern1_interleaving(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
pattern2_sequential	test_case\plr_daxx0008.c	/^static int pattern2_sequential(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
prepare_crash_buffer	test_case\plr_daxx0008.c	/^static u32* prepare_crash_buffer(void)$/;"	f	file:
prepare_random_ref_buffer	test_case\plr_daxx0008.c	/^static u32* prepare_random_ref_buffer(void)$/;"	f	file:
prepare_ref_buffer	test_case\plr_daxx0008.c	/^static u32* prepare_ref_buffer(void)$/;"	f	file:
print_rd_crash_info	test_case\plr_daxx0008.c	/^static void print_rd_crash_info(uchar * buf, struct plr_state * state, struct Unconfirmed_Info * info)$/;"	f	file:
rd_loop_count	test_case\plr_daxx0008.c	/^static int rd_loop_count = 0;$/;"	v	file:
read_daxx_0008	test_case\plr_daxx0008.c	/^int read_daxx_0008(uchar * buf, uint test_area_start, uint test_area_length)$/;"	f
read_disturb_crash_info	test_case\plr_daxx0008.c	/^typedef struct read_disturb_crash_info$/;"	s	file:
read_disturb_crash_info_s	test_case\plr_daxx0008.c	/^}  read_disturb_crash_info_s;$/;"	t	typeref:struct:read_disturb_crash_info	file:
read_disturb_verify	test_case\plr_daxx0008.c	/^static int read_disturb_verify(u32* ref_buf, int *sec_no_in_zone_p, int b_verify)$/;"	f	file:
read_dummy	test_case\plr_daxx0008.c	/^int read_dummy( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
repeat_no	test_case\plr_daxx0008.c	/^	int 				repeat_no;		\/\/ repeat number in a boot$/;"	m	struct:read_disturb_crash_info	file:
sec_no_in_zone	test_case\plr_daxx0008.c	/^	int 				sec_no_in_zone;	\/\/ sector number in a zone$/;"	m	struct:read_disturb_crash_info	file:
tune_test_area	test_case\plr_daxx0008.c	/^static void tune_test_area(uint* test_area_start, uint* test_area_length)$/;"	f	file:
write_daxx_0008	test_case\plr_daxx0008.c	/^int write_daxx_0008(uchar * buf, uint test_area_start, uint test_area_length)$/;"	f
write_dummy	test_case\plr_daxx0008.c	/^int write_dummy( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
BUFFERS_PER_TEST_AREA	test_case\plr_daxx0009.c	76;"	d	file:
BUFFERS_PER_ZONE	test_case\plr_daxx0009.c	73;"	d	file:
BUFFER_SIZE	test_case\plr_daxx0009.c	58;"	d	file:
BYTES_PER_BUFFER	test_case\plr_daxx0009.c	62;"	d	file:
BYTES_PER_PAGE	test_case\plr_daxx0009.c	69;"	d	file:
BYTES_PER_SECTOR	test_case\plr_daxx0009.c	65;"	d	file:
BYTES_PER_TEST_AREA	test_case\plr_daxx0009.c	64;"	d	file:
CHUNK_SIZE	test_case\plr_daxx0009.c	51;"	d	file:
COMPARE_FIRST_4BYTE_ONLY	test_case\plr_daxx0009.c	106;"	d	file:
INTENDED_CRASH_PAGE	test_case\plr_daxx0009.c	121;"	d	file:
INTENDED_CRASH_WORD	test_case\plr_daxx0009.c	122;"	d	file:
PAGES_PER_BUFFER	test_case\plr_daxx0009.c	77;"	d	file:
PAGES_PER_TEST_AREA	test_case\plr_daxx0009.c	74;"	d	file:
PAGES_PER_ZONE	test_case\plr_daxx0009.c	71;"	d	file:
RD_ERR_ERASE_FAILED	test_case\plr_daxx0009.c	112;"	d	file:
RD_ERR_INVALID_ZONE_NUMBER	test_case\plr_daxx0009.c	111;"	d	file:
RD_ERR_READ_VERIFY_FAILED	test_case\plr_daxx0009.c	109;"	d	file:
RD_ERR_WRITE_FAILED	test_case\plr_daxx0009.c	110;"	d	file:
RD_MAGIC_NUMBER	test_case\plr_daxx0009.c	115;"	d	file:
RD_MAGIC_NUMBER_INTENSIVE_CRASH	test_case\plr_daxx0009.c	120;"	d	file:
RD_PAGES	test_case\plr_daxx0009.c	101;"	d	file:
RD_PAGES	test_case\plr_daxx0009.c	95;"	d	file:
RD_REPEAT_COUNT	test_case\plr_daxx0009.c	102;"	d	file:
RD_REPEAT_COUNT	test_case\plr_daxx0009.c	96;"	d	file:
SECTORS_PER_BUFFER	test_case\plr_daxx0009.c	67;"	d	file:
SECTORS_PER_PAGE	test_case\plr_daxx0009.c	68;"	d	file:
SECTORS_PER_TEST_AREA	test_case\plr_daxx0009.c	75;"	d	file:
SECTORS_PER_ZONE	test_case\plr_daxx0009.c	72;"	d	file:
SJD_CAUSE_INTENDED_CRASH	test_case\plr_daxx0009.c	97;"	d	file:
WORDS_PER_BUFFER	test_case\plr_daxx0009.c	63;"	d	file:
WORDS_PER_PAGE	test_case\plr_daxx0009.c	70;"	d	file:
WORDS_PER_SECTOR	test_case\plr_daxx0009.c	66;"	d	file:
_rd_crash_info	test_case\plr_daxx0009.c	/^static read_disturb_crash_info_s _rd_crash_info[1];	\/\/ read_disturb_crash_info;$/;"	v	file:
boot_cnt	test_case\plr_daxx0009.c	/^	int					boot_cnt;		\/\/ boot count$/;"	m	struct:read_disturb_crash_info	file:
compare_buffer	test_case\plr_daxx0009.c	/^static int compare_buffer(const u64* buf_ref, u64* buf, int word_len, int* word_pos)$/;"	f	file:
err_code	test_case\plr_daxx0009.c	/^	int					err_code;		\/\/ error code, reserved$/;"	m	struct:read_disturb_crash_info	file:
extra_verification	test_case\plr_daxx0009.c	/^static int extra_verification(uchar *buf, struct plr_state *state)	\/\/ 8 MB read buffer$/;"	f	file:
fill_read_disturb_area	test_case\plr_daxx0009.c	/^static int fill_read_disturb_area( void )$/;"	f	file:
fill_read_disturb_area_of_ratio	test_case\plr_daxx0009.c	/^static int fill_read_disturb_area_of_ratio(u32 start_addr, u32 end_addr, u64* wbuf, u32 wLen){$/;"	f	file:
init_pattern_1_2	test_case\plr_daxx0009.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_daxx_0009	test_case\plr_daxx0009.c	/^int initialize_daxx_0009( uchar * buf, uint test_area_start, uint test_area_length )$/;"	f
memory_dump	test_case\plr_daxx0009.c	/^static void memory_dump(u64* p0, int words)$/;"	f	file:
pattern1_interleaving	test_case\plr_daxx0009.c	/^static int pattern1_interleaving(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
pattern2_sequential	test_case\plr_daxx0009.c	/^static int pattern2_sequential(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
prepare_crash_buffer	test_case\plr_daxx0009.c	/^static u32* prepare_crash_buffer(void)$/;"	f	file:
prepare_random_ref_buffer	test_case\plr_daxx0009.c	/^static u64* prepare_random_ref_buffer(void)$/;"	f	file:
prepare_ref_buffer	test_case\plr_daxx0009.c	/^static u64* prepare_ref_buffer(void)$/;"	f	file:
print_rd_crash_info	test_case\plr_daxx0009.c	/^static void print_rd_crash_info(uchar * buf, struct plr_state * state, struct Unconfirmed_Info * info)$/;"	f	file:
rd_loop_count	test_case\plr_daxx0009.c	/^static int rd_loop_count = 1;$/;"	v	file:
read_daxx_0009	test_case\plr_daxx0009.c	/^int read_daxx_0009(uchar * buf, uint test_area_start, uint test_area_length)$/;"	f
read_disturb_crash_info	test_case\plr_daxx0009.c	/^typedef struct read_disturb_crash_info$/;"	s	file:
read_disturb_crash_info_s	test_case\plr_daxx0009.c	/^}  read_disturb_crash_info_s;$/;"	t	typeref:struct:read_disturb_crash_info	file:
read_disturb_verify	test_case\plr_daxx0009.c	/^static int read_disturb_verify(u64* ref_buf, int *sec_no_in_zone_p )$/;"	f	file:
repeat_no	test_case\plr_daxx0009.c	/^	int 				repeat_no;		\/\/ repeat number in a boot$/;"	m	struct:read_disturb_crash_info	file:
sec_no_in_zone	test_case\plr_daxx0009.c	/^	int 				sec_no_in_zone;	\/\/ sector number in a zone$/;"	m	struct:read_disturb_crash_info	file:
tune_test_area	test_case\plr_daxx0009.c	/^static void tune_test_area(uint* test_area_start, uint* test_area_length)$/;"	f	file:
write_daxx_0009	test_case\plr_daxx0009.c	/^int write_daxx_0009(uchar * buf, uint test_area_start, uint test_area_length)$/;"	f
ADDITIONAL_DAYS_PER_1K	test_case\plr_daxx0010.c	349;"	d	file:
BUFFERS_PER_TEST_AREA	test_case\plr_daxx0010.c	75;"	d	file:
BUFFERS_PER_ZONE	test_case\plr_daxx0010.c	72;"	d	file:
BUFFER_SIZE	test_case\plr_daxx0010.c	57;"	d	file:
BYTES_PER_BUFFER	test_case\plr_daxx0010.c	61;"	d	file:
BYTES_PER_PAGE	test_case\plr_daxx0010.c	68;"	d	file:
BYTES_PER_SECTOR	test_case\plr_daxx0010.c	64;"	d	file:
BYTES_PER_TEST_AREA	test_case\plr_daxx0010.c	63;"	d	file:
CHUNK_SIZE	test_case\plr_daxx0010.c	50;"	d	file:
COMPARE_FIRST_4BYTE_ONLY	test_case\plr_daxx0010.c	104;"	d	file:
INTENDED_CRASH_PAGE	test_case\plr_daxx0010.c	118;"	d	file:
INTENDED_CRASH_WORD	test_case\plr_daxx0010.c	119;"	d	file:
PAGES_PER_BUFFER	test_case\plr_daxx0010.c	76;"	d	file:
PAGES_PER_TEST_AREA	test_case\plr_daxx0010.c	73;"	d	file:
PAGES_PER_ZONE	test_case\plr_daxx0010.c	70;"	d	file:
RD_ERR_INVALID_ZONE_NUMBER	test_case\plr_daxx0010.c	108;"	d	file:
RD_ERR_READ_IO_FAILED	test_case\plr_daxx0010.c	109;"	d	file:
RD_ERR_READ_VERIFY_FAILED	test_case\plr_daxx0010.c	106;"	d	file:
RD_ERR_WRITE_FAILED	test_case\plr_daxx0010.c	107;"	d	file:
RD_MAGIC_NUMBER	test_case\plr_daxx0010.c	111;"	d	file:
RD_MAGIC_NUMBER_INTENSIVE_CRASH	test_case\plr_daxx0010.c	117;"	d	file:
RD_PAGES	test_case\plr_daxx0010.c	93;"	d	file:
RD_PAGES	test_case\plr_daxx0010.c	99;"	d	file:
RD_QE_NUMBER	test_case\plr_daxx0010.c	113;"	d	file:
RD_REPEAT_COUNT	test_case\plr_daxx0010.c	100;"	d	file:
RD_REPEAT_COUNT	test_case\plr_daxx0010.c	94;"	d	file:
SECTORS_PER_BUFFER	test_case\plr_daxx0010.c	66;"	d	file:
SECTORS_PER_PAGE	test_case\plr_daxx0010.c	67;"	d	file:
SECTORS_PER_TEST_AREA	test_case\plr_daxx0010.c	74;"	d	file:
SECTORS_PER_ZONE	test_case\plr_daxx0010.c	71;"	d	file:
SJD_CAUSE_INTENDED_CRASH	test_case\plr_daxx0010.c	95;"	d	file:
WORDS_PER_BUFFER	test_case\plr_daxx0010.c	62;"	d	file:
WORDS_PER_PAGE	test_case\plr_daxx0010.c	69;"	d	file:
WORDS_PER_SECTOR	test_case\plr_daxx0010.c	65;"	d	file:
_rd_crash_info	test_case\plr_daxx0010.c	/^static read_disturb_crash_info_s _rd_crash_info[1];	\/\/ read_disturb_crash_info;$/;"	v	file:
boot_cnt	test_case\plr_daxx0010.c	/^	int					boot_cnt;		\/\/ boot count$/;"	m	struct:read_disturb_crash_info	file:
caculate_kb_per_sec	test_case\plr_daxx0010.c	/^static u32 caculate_kb_per_sec(u32 total_size, u64 elapsed_ticks)$/;"	f	file:
compare_buffer	test_case\plr_daxx0010.c	/^static int compare_buffer(const u32* buf_ref, u32* buf, int word_len, int* word_pos)$/;"	f	file:
err_code	test_case\plr_daxx0010.c	/^	int					err_code;		\/\/ error code, reserved$/;"	m	struct:read_disturb_crash_info	file:
extra_verification	test_case\plr_daxx0010.c	/^static int extra_verification(uchar *buf, struct plr_state *state)	\/\/ 8 MB read buffer$/;"	f	file:
fill_read_disturb_area	test_case\plr_daxx0010.c	/^static int fill_read_disturb_area( void )$/;"	f	file:
init_pattern_1_2	test_case\plr_daxx0010.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_daxx_0010	test_case\plr_daxx0010.c	/^int initialize_daxx_0010( uchar * buf, uint test_area_start, uint test_area_length )$/;"	f
memory_dump	test_case\plr_daxx0010.c	/^static void memory_dump(u32* p0, int words)$/;"	f	file:
pattern1_interleaving	test_case\plr_daxx0010.c	/^static int pattern1_interleaving(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
pattern2_sequential	test_case\plr_daxx0010.c	/^static int pattern2_sequential(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
prepare_crash_buffer	test_case\plr_daxx0010.c	/^static u32* prepare_crash_buffer(void)$/;"	f	file:
prepare_random_ref_buffer	test_case\plr_daxx0010.c	/^static u32* prepare_random_ref_buffer(void)$/;"	f	file:
prepare_ref_buffer	test_case\plr_daxx0010.c	/^static u32* prepare_ref_buffer(void)$/;"	f	file:
print_rd_crash_info	test_case\plr_daxx0010.c	/^static void print_rd_crash_info(uchar * buf, struct plr_state * state, struct Unconfirmed_Info * info)$/;"	f	file:
rd_loop_count	test_case\plr_daxx0010.c	/^static int rd_loop_count = 0;$/;"	v	file:
read_daxx_0010	test_case\plr_daxx0010.c	/^int read_daxx_0010(uchar * buf, uint test_area_start, uint test_area_length)$/;"	f
read_disturb_crash_info	test_case\plr_daxx0010.c	/^typedef struct read_disturb_crash_info$/;"	s	file:
read_disturb_crash_info_s	test_case\plr_daxx0010.c	/^}  read_disturb_crash_info_s;$/;"	t	typeref:struct:read_disturb_crash_info	file:
read_disturb_verify	test_case\plr_daxx0010.c	/^static int read_disturb_verify(u32* ref_buf, int *sec_no_in_zone_p, int b_verify)$/;"	f	file:
repeat_no	test_case\plr_daxx0010.c	/^	int 				repeat_no;		\/\/ repeat number in a boot$/;"	m	struct:read_disturb_crash_info	file:
sec_no_in_zone	test_case\plr_daxx0010.c	/^	int 				sec_no_in_zone;	\/\/ sector number in a zone$/;"	m	struct:read_disturb_crash_info	file:
tune_test_area	test_case\plr_daxx0010.c	/^static void tune_test_area(uint* test_area_start, uint* test_area_length)$/;"	f	file:
write_daxx_0010	test_case\plr_daxx0010.c	/^int write_daxx_0010(uchar * buf, uint test_area_start, uint test_area_length)$/;"	f
BUFFERS_PER_TEST_AREA	test_case\plr_daxx0011.c	76;"	d	file:
BUFFERS_PER_ZONE	test_case\plr_daxx0011.c	73;"	d	file:
BUFFER_SIZE	test_case\plr_daxx0011.c	58;"	d	file:
BYTES_PER_BUFFER	test_case\plr_daxx0011.c	62;"	d	file:
BYTES_PER_PAGE	test_case\plr_daxx0011.c	69;"	d	file:
BYTES_PER_SECTOR	test_case\plr_daxx0011.c	65;"	d	file:
BYTES_PER_TEST_AREA	test_case\plr_daxx0011.c	64;"	d	file:
CHUNK_SIZE	test_case\plr_daxx0011.c	51;"	d	file:
COMPARE_FIRST_4BYTE_ONLY	test_case\plr_daxx0011.c	105;"	d	file:
INTENDED_CRASH_PAGE	test_case\plr_daxx0011.c	117;"	d	file:
INTENDED_CRASH_WORD	test_case\plr_daxx0011.c	118;"	d	file:
PAGES_PER_BUFFER	test_case\plr_daxx0011.c	77;"	d	file:
PAGES_PER_TEST_AREA	test_case\plr_daxx0011.c	74;"	d	file:
PAGES_PER_ZONE	test_case\plr_daxx0011.c	71;"	d	file:
RD_ERR_INVALID_ZONE_NUMBER	test_case\plr_daxx0011.c	109;"	d	file:
RD_ERR_READ_IO_FAILED	test_case\plr_daxx0011.c	110;"	d	file:
RD_ERR_READ_VERIFY_FAILED	test_case\plr_daxx0011.c	107;"	d	file:
RD_ERR_WRITE_FAILED	test_case\plr_daxx0011.c	108;"	d	file:
RD_MAGIC_NUMBER	test_case\plr_daxx0011.c	112;"	d	file:
RD_MAGIC_NUMBER_INTENSIVE_CRASH	test_case\plr_daxx0011.c	116;"	d	file:
RD_PAGES	test_case\plr_daxx0011.c	100;"	d	file:
RD_PAGES	test_case\plr_daxx0011.c	94;"	d	file:
RD_REPEAT_COUNT	test_case\plr_daxx0011.c	101;"	d	file:
RD_REPEAT_COUNT	test_case\plr_daxx0011.c	95;"	d	file:
SECTORS_PER_BUFFER	test_case\plr_daxx0011.c	67;"	d	file:
SECTORS_PER_PAGE	test_case\plr_daxx0011.c	68;"	d	file:
SECTORS_PER_TEST_AREA	test_case\plr_daxx0011.c	75;"	d	file:
SECTORS_PER_ZONE	test_case\plr_daxx0011.c	72;"	d	file:
SJD_CAUSE_INTENDED_CRASH	test_case\plr_daxx0011.c	96;"	d	file:
WORDS_PER_BUFFER	test_case\plr_daxx0011.c	63;"	d	file:
WORDS_PER_PAGE	test_case\plr_daxx0011.c	70;"	d	file:
WORDS_PER_SECTOR	test_case\plr_daxx0011.c	66;"	d	file:
_rd_crash_info	test_case\plr_daxx0011.c	/^static read_disturb_crash_info_s _rd_crash_info[1];	\/\/ read_disturb_crash_info;$/;"	v	file:
boot_cnt	test_case\plr_daxx0011.c	/^	int					boot_cnt;		\/\/ boot count$/;"	m	struct:read_disturb_crash_info	file:
caculate_kb_per_sec	test_case\plr_daxx0011.c	/^static u32 caculate_kb_per_sec(u32 total_size, u64 elapsed_ticks)$/;"	f	file:
cmd	test_case\plr_daxx0011.c	/^	u32 cmd;$/;"	m	struct:workload_list	file:
cmd	test_case\plr_daxx0011.c	/^    long 				cmd;$/;"	m	struct:workload_cmd_line	file:
compare_buffer	test_case\plr_daxx0011.c	/^static int compare_buffer(const u32* buf_ref, u32* buf, int word_len, int* word_pos)$/;"	f	file:
delay	test_case\plr_daxx0011.c	/^	u32 delay;$/;"	m	struct:workload_list	file:
delay	test_case\plr_daxx0011.c	/^    long 				delay;$/;"	m	struct:workload_cmd_line	file:
do_workload	test_case\plr_daxx0011.c	/^static int do_workload( void )$/;"	f	file:
err_code	test_case\plr_daxx0011.c	/^	int					err_code;		\/\/ error code, reserved$/;"	m	struct:read_disturb_crash_info	file:
extra_verification	test_case\plr_daxx0011.c	/^static int extra_verification(uchar *buf, struct plr_state *state)	\/\/ 8 MB read buffer$/;"	f	file:
init_pattern_1_2	test_case\plr_daxx0011.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_daxx_0011	test_case\plr_daxx0011.c	/^int initialize_daxx_0011( uchar * buf, uint test_area_start, uint test_area_length )$/;"	f
memory_dump	test_case\plr_daxx0011.c	/^static void memory_dump(u32* p0, int words)$/;"	f	file:
pattern1_interleaving	test_case\plr_daxx0011.c	/^static int pattern1_interleaving(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
pattern2_sequential	test_case\plr_daxx0011.c	/^static int pattern2_sequential(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
prepare_crash_buffer	test_case\plr_daxx0011.c	/^static u32* prepare_crash_buffer(void)$/;"	f	file:
prepare_random_ref_buffer	test_case\plr_daxx0011.c	/^static u32* prepare_random_ref_buffer(void)$/;"	f	file:
prepare_random_ref_sector	test_case\plr_daxx0011.c	/^static u32* prepare_random_ref_sector(void)$/;"	f	file:
prepare_ref_buffer	test_case\plr_daxx0011.c	/^static u32* prepare_ref_buffer(void)$/;"	f	file:
print_rd_crash_info	test_case\plr_daxx0011.c	/^static void print_rd_crash_info(uchar * buf, struct plr_state * state, struct Unconfirmed_Info * info)$/;"	f	file:
rd_loop_count	test_case\plr_daxx0011.c	/^static int rd_loop_count = 0;$/;"	v	file:
read_daxx_0011	test_case\plr_daxx0011.c	/^int read_daxx_0011(uchar * buf, uint test_area_start, uint test_area_length)$/;"	f
read_disturb_crash_info	test_case\plr_daxx0011.c	/^typedef struct read_disturb_crash_info$/;"	s	file:
read_disturb_crash_info_s	test_case\plr_daxx0011.c	/^}  read_disturb_crash_info_s;$/;"	t	typeref:struct:read_disturb_crash_info	file:
read_disturb_verify	test_case\plr_daxx0011.c	/^static int read_disturb_verify(u32* ref_buf, int *sec_no_in_zone_p, int b_verify)$/;"	f	file:
repeat_no	test_case\plr_daxx0011.c	/^	int 				repeat_no;		\/\/ repeat number in a boot$/;"	m	struct:read_disturb_crash_info	file:
sec_no_in_zone	test_case\plr_daxx0011.c	/^	int 				sec_no_in_zone;	\/\/ sector number in a zone$/;"	m	struct:read_disturb_crash_info	file:
sector_cnt	test_case\plr_daxx0011.c	/^	u32 sector_cnt;$/;"	m	struct:workload_list	file:
sector_cnt	test_case\plr_daxx0011.c	/^    long 				sector_cnt;$/;"	m	struct:workload_cmd_line	file:
sleep_and_resume	test_case\plr_daxx0011.c	/^static int sleep_and_resume(uint delay_msec)$/;"	f	file:
sleep_and_wakeup	test_case\plr_daxx0011.c	/^static int sleep_and_wakeup(int loop, int delay_msec)$/;"	f	file:
tune_test_area	test_case\plr_daxx0011.c	/^static void tune_test_area(uint* test_area_start, uint* test_area_length)$/;"	f	file:
workload_cmd_line	test_case\plr_daxx0011.c	/^struct workload_cmd_line{$/;"	s	file:
workload_list	test_case\plr_daxx0011.c	/^struct workload_list{$/;"	s	file:
workload_read	test_case\plr_daxx0011.c	/^static int workload_read(u32 sector_cnt, u32 random_offset, u32* rbuf){$/;"	f	file:
workload_resume	test_case\plr_daxx0011.c	/^static int workload_resume()$/;"	f	file:
workload_sleep	test_case\plr_daxx0011.c	/^static int workload_sleep()$/;"	f	file:
workload_suspend	test_case\plr_daxx0011.c	/^static int workload_suspend()$/;"	f	file:
workload_write	test_case\plr_daxx0011.c	/^static int workload_write(u32 sector_cnt, u32 random_offset, u32* wbuf){$/;"	f	file:
write_daxx_0011	test_case\plr_daxx0011.c	/^int write_daxx_0011(uchar * buf, uint test_area_start, uint test_area_length)$/;"	f
BUFFERS_PER_TEST_AREA	test_case\plr_daxx0012.c	77;"	d	file:
BUFFERS_PER_ZONE	test_case\plr_daxx0012.c	74;"	d	file:
BUFFER_SIZE	test_case\plr_daxx0012.c	59;"	d	file:
BYTES_PER_BUFFER	test_case\plr_daxx0012.c	63;"	d	file:
BYTES_PER_PAGE	test_case\plr_daxx0012.c	70;"	d	file:
BYTES_PER_SECTOR	test_case\plr_daxx0012.c	66;"	d	file:
BYTES_PER_TEST_AREA	test_case\plr_daxx0012.c	65;"	d	file:
CHUNK_SIZE	test_case\plr_daxx0012.c	52;"	d	file:
COMPARE_FIRST_4BYTE_ONLY	test_case\plr_daxx0012.c	106;"	d	file:
INTENDED_CRASH_PAGE	test_case\plr_daxx0012.c	118;"	d	file:
INTENDED_CRASH_WORD	test_case\plr_daxx0012.c	119;"	d	file:
PAGES_PER_BUFFER	test_case\plr_daxx0012.c	78;"	d	file:
PAGES_PER_TEST_AREA	test_case\plr_daxx0012.c	75;"	d	file:
PAGES_PER_ZONE	test_case\plr_daxx0012.c	72;"	d	file:
RD_ERR_INVALID_ZONE_NUMBER	test_case\plr_daxx0012.c	110;"	d	file:
RD_ERR_READ_IO_FAILED	test_case\plr_daxx0012.c	111;"	d	file:
RD_ERR_READ_VERIFY_FAILED	test_case\plr_daxx0012.c	108;"	d	file:
RD_ERR_WRITE_FAILED	test_case\plr_daxx0012.c	109;"	d	file:
RD_MAGIC_NUMBER	test_case\plr_daxx0012.c	113;"	d	file:
RD_MAGIC_NUMBER_INTENSIVE_CRASH	test_case\plr_daxx0012.c	117;"	d	file:
RD_PAGES	test_case\plr_daxx0012.c	101;"	d	file:
RD_PAGES	test_case\plr_daxx0012.c	95;"	d	file:
RD_REPEAT_COUNT	test_case\plr_daxx0012.c	102;"	d	file:
RD_REPEAT_COUNT	test_case\plr_daxx0012.c	96;"	d	file:
SECTORS_PER_BUFFER	test_case\plr_daxx0012.c	68;"	d	file:
SECTORS_PER_PAGE	test_case\plr_daxx0012.c	69;"	d	file:
SECTORS_PER_TEST_AREA	test_case\plr_daxx0012.c	76;"	d	file:
SECTORS_PER_ZONE	test_case\plr_daxx0012.c	73;"	d	file:
SJD_CAUSE_INTENDED_CRASH	test_case\plr_daxx0012.c	97;"	d	file:
WORDS_PER_BUFFER	test_case\plr_daxx0012.c	64;"	d	file:
WORDS_PER_PAGE	test_case\plr_daxx0012.c	71;"	d	file:
WORDS_PER_SECTOR	test_case\plr_daxx0012.c	67;"	d	file:
_rd_crash_info	test_case\plr_daxx0012.c	/^static read_disturb_crash_info_s _rd_crash_info[1];	\/\/ read_disturb_crash_info;$/;"	v	file:
boot_cnt	test_case\plr_daxx0012.c	/^	int					boot_cnt;		\/\/ boot count$/;"	m	struct:read_disturb_crash_info	file:
caculate_kb_per_sec	test_case\plr_daxx0012.c	/^static u32 caculate_kb_per_sec(u32 total_size, u64 elapsed_ticks)$/;"	f	file:
cmd	test_case\plr_daxx0012.c	/^	u32 cmd;$/;"	m	struct:workload_list	file:
cmd	test_case\plr_daxx0012.c	/^    long 				cmd;$/;"	m	struct:workload_cmd_line	file:
compare_buffer	test_case\plr_daxx0012.c	/^static int compare_buffer(const u32* buf_ref, u32* buf, int word_len, int* word_pos)$/;"	f	file:
delay	test_case\plr_daxx0012.c	/^	u32 delay;$/;"	m	struct:workload_list	file:
delay	test_case\plr_daxx0012.c	/^    long 				delay;$/;"	m	struct:workload_cmd_line	file:
do_workload	test_case\plr_daxx0012.c	/^static int do_workload( void )$/;"	f	file:
err_code	test_case\plr_daxx0012.c	/^	int					err_code;		\/\/ error code, reserved$/;"	m	struct:read_disturb_crash_info	file:
extra_verification	test_case\plr_daxx0012.c	/^static int extra_verification(uchar *buf, struct plr_state *state)	\/\/ 8 MB read buffer$/;"	f	file:
init_pattern_1_2	test_case\plr_daxx0012.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_daxx_0012	test_case\plr_daxx0012.c	/^int initialize_daxx_0012( uchar * buf, uint test_area_start, uint test_area_length )$/;"	f
memory_dump	test_case\plr_daxx0012.c	/^static void memory_dump(u32* p0, int words)$/;"	f	file:
pattern1_interleaving	test_case\plr_daxx0012.c	/^static int pattern1_interleaving(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
pattern2_sequential	test_case\plr_daxx0012.c	/^static int pattern2_sequential(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
prepare_crash_buffer	test_case\plr_daxx0012.c	/^static u32* prepare_crash_buffer(void)$/;"	f	file:
prepare_random_ref_buffer	test_case\plr_daxx0012.c	/^static u32* prepare_random_ref_buffer(void)$/;"	f	file:
prepare_random_ref_sector	test_case\plr_daxx0012.c	/^static u32* prepare_random_ref_sector(void)$/;"	f	file:
prepare_ref_buffer	test_case\plr_daxx0012.c	/^static u32* prepare_ref_buffer(void)$/;"	f	file:
print_rd_crash_info	test_case\plr_daxx0012.c	/^static void print_rd_crash_info(uchar * buf, struct plr_state * state, struct Unconfirmed_Info * info)$/;"	f	file:
rd_loop_count	test_case\plr_daxx0012.c	/^static int rd_loop_count = 0;$/;"	v	file:
read_daxx_0012	test_case\plr_daxx0012.c	/^int read_daxx_0012(uchar * buf, uint test_area_start, uint test_area_length)$/;"	f
read_disturb_crash_info	test_case\plr_daxx0012.c	/^typedef struct read_disturb_crash_info$/;"	s	file:
read_disturb_crash_info_s	test_case\plr_daxx0012.c	/^}  read_disturb_crash_info_s;$/;"	t	typeref:struct:read_disturb_crash_info	file:
read_disturb_verify	test_case\plr_daxx0012.c	/^static int read_disturb_verify(u32* ref_buf, int *sec_no_in_zone_p, int b_verify)$/;"	f	file:
repeat_no	test_case\plr_daxx0012.c	/^	int 				repeat_no;		\/\/ repeat number in a boot$/;"	m	struct:read_disturb_crash_info	file:
sec_no_in_zone	test_case\plr_daxx0012.c	/^	int 				sec_no_in_zone;	\/\/ sector number in a zone$/;"	m	struct:read_disturb_crash_info	file:
sector_cnt	test_case\plr_daxx0012.c	/^	u32 sector_cnt;$/;"	m	struct:workload_list	file:
sector_cnt	test_case\plr_daxx0012.c	/^    long 				sector_cnt;$/;"	m	struct:workload_cmd_line	file:
tune_test_area	test_case\plr_daxx0012.c	/^static void tune_test_area(uint* test_area_start, uint* test_area_length)$/;"	f	file:
workload_cmd_line	test_case\plr_daxx0012.c	/^struct workload_cmd_line{$/;"	s	file:
workload_list	test_case\plr_daxx0012.c	/^struct workload_list{$/;"	s	file:
workload_read	test_case\plr_daxx0012.c	/^static int workload_read(u32 sector_cnt, u32 random_offset, u32* rbuf){$/;"	f	file:
workload_resume	test_case\plr_daxx0012.c	/^static int workload_resume()$/;"	f	file:
workload_sleep	test_case\plr_daxx0012.c	/^static int workload_sleep()$/;"	f	file:
workload_suspend	test_case\plr_daxx0012.c	/^static int workload_suspend()$/;"	f	file:
workload_write	test_case\plr_daxx0012.c	/^static int workload_write(u32 sector_cnt, u32 random_offset, u32* wbuf){$/;"	f	file:
write_daxx_0012	test_case\plr_daxx0012.c	/^int write_daxx_0012(uchar * buf, uint test_area_start, uint test_area_length)$/;"	f
CURRENT_REQUEST	test_case\plr_dpin0000.c	/^enum CURRENT_REQUEST$/;"	g	file:
MAX_REQUEST_SECTORS	test_case\plr_dpin0000.c	23;"	d	file:
MIN_REQUEST_SECTORS	test_case\plr_dpin0000.c	22;"	d	file:
WRITE_4K	test_case\plr_dpin0000.c	/^	WRITE_4K,$/;"	e	enum:CURRENT_REQUEST	file:
WRITE_RANDOM	test_case\plr_dpin0000.c	/^	WRITE_RANDOM = 0,$/;"	e	enum:CURRENT_REQUEST	file:
extra_verification	test_case\plr_dpin0000.c	/^static int extra_verification(uchar *buf, struct plr_state *state)$/;"	f	file:
init_pattern_1_2	test_case\plr_dpin0000.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_dpin_0000	test_case\plr_dpin0000.c	/^int initialize_dpin_0000( uchar * buf, uint test_area_start, uint test_area_length )$/;"	f
pattern_interleaving	test_case\plr_dpin0000.c	/^static int pattern_interleaving(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
read_dpin_0000	test_case\plr_dpin0000.c	/^int read_dpin_0000( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
verify_customizing_00	test_case\plr_dpin0000.c	/^static int verify_customizing_00(uchar *buf, uint start_lsn, uint end_lsn, uint expected_loop)$/;"	f	file:
write_dpin_0000	test_case\plr_dpin0000.c	/^int write_dpin_0000( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
CURRENT_REQUEST	test_case\plr_dpin0001.c	/^enum CURRENT_REQUEST$/;"	g	file:
MAX_REQUEST_SECTORS	test_case\plr_dpin0001.c	23;"	d	file:
MIN_REQUEST_SECTORS	test_case\plr_dpin0001.c	22;"	d	file:
SKIP_16K	test_case\plr_dpin0001.c	/^	SKIP_16K = 0,$/;"	e	enum:CURRENT_REQUEST	file:
WRITE_4K	test_case\plr_dpin0001.c	/^	WRITE_4K,$/;"	e	enum:CURRENT_REQUEST	file:
WRITE_RANDOM	test_case\plr_dpin0001.c	/^	WRITE_RANDOM,$/;"	e	enum:CURRENT_REQUEST	file:
extra_verification	test_case\plr_dpin0001.c	/^static int extra_verification(uchar *buf, struct plr_state *state)$/;"	f	file:
init_pattern_1_2	test_case\plr_dpin0001.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_dpin_0001	test_case\plr_dpin0001.c	/^int initialize_dpin_0001( uchar * buf, uint test_area_start, uint test_area_length )$/;"	f
pattern_sequential	test_case\plr_dpin0001.c	/^static int pattern_sequential(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
read_dpin_0001	test_case\plr_dpin0001.c	/^int read_dpin_0001( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
verify_customizing_01	test_case\plr_dpin0001.c	/^static int verify_customizing_01(uchar *buf, uint start_lsn, uint end_lsn, uint expected_loop)$/;"	f	file:
write_dpin_0001	test_case\plr_dpin0001.c	/^int write_dpin_0001( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
_verification_sequence	test_case\plr_dpin0002.c	/^static bool _verification_sequence = FALSE;$/;"	v	file:
extra_verification	test_case\plr_dpin0002.c	/^static int extra_verification(uchar *buf, struct plr_state *state)$/;"	f	file:
init_pattern_1_2	test_case\plr_dpin0002.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_dpin_0002	test_case\plr_dpin0002.c	/^int initialize_dpin_0002( uchar * buf, uint test_area_start, uint test_area_length )$/;"	f
pattern_interleaving	test_case\plr_dpin0002.c	/^static int pattern_interleaving(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
read_dpin_0002	test_case\plr_dpin0002.c	/^int read_dpin_0002( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
write_dpin_0002	test_case\plr_dpin0002.c	/^int write_dpin_0002( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
CURRENT_REQUEST	test_case\plr_dpin0003.c	/^enum CURRENT_REQUEST$/;"	g	file:
MAX_REQUEST_SECTORS	test_case\plr_dpin0003.c	22;"	d	file:
SKIP_RANDOM	test_case\plr_dpin0003.c	/^	SKIP_RANDOM = 0,$/;"	e	enum:CURRENT_REQUEST	file:
WRITE_RANDOM	test_case\plr_dpin0003.c	/^	WRITE_RANDOM,$/;"	e	enum:CURRENT_REQUEST	file:
extra_verification	test_case\plr_dpin0003.c	/^static int extra_verification(uchar *buf, struct plr_state *state)$/;"	f	file:
init_pattern_1_2	test_case\plr_dpin0003.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_dpin_0003	test_case\plr_dpin0003.c	/^int initialize_dpin_0003( uchar * buf, uint test_area_start, uint test_area_length )$/;"	f
pattern_sequential	test_case\plr_dpin0003.c	/^static int pattern_sequential(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
read_dpin_0003	test_case\plr_dpin0003.c	/^int read_dpin_0003(uchar * buf, uint test_start_sector, uint test_sector_length)$/;"	f
verify_customizing_03	test_case\plr_dpin0003.c	/^static int verify_customizing_03(uchar *buf, uint start_lsn, uint end_lsn, uint expected_loop)$/;"	f	file:
write_dpin_0003	test_case\plr_dpin0003.c	/^int write_dpin_0003(uchar * buf, uint test_start_sector, uint test_sector_length)$/;"	f
CHUNK_SIZE	test_case\plr_dpin0004.c	49;"	d	file:
_writing_sequence	test_case\plr_dpin0004.c	/^static bool _writing_sequence = FALSE;$/;"	v	file:
extra_verification	test_case\plr_dpin0004.c	/^static int extra_verification(uchar *buf, struct plr_state *state)$/;"	f	file:
init_pattern_1_2	test_case\plr_dpin0004.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_dpin_0004	test_case\plr_dpin0004.c	/^int initialize_dpin_0004( uchar * buf, uint test_area_start, uint test_area_length )$/;"	f
pattern1_interleaving	test_case\plr_dpin0004.c	/^static int pattern1_interleaving(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
pattern2_sequential	test_case\plr_dpin0004.c	/^static int pattern2_sequential(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
read_dpin_0004	test_case\plr_dpin0004.c	/^int read_dpin_0004(uchar * buf, uint test_area_start, uint test_area_length) $/;"	f
write_dpin_0004	test_case\plr_dpin0004.c	/^int write_dpin_0004(uchar * buf, uint test_area_start, uint test_area_length) $/;"	f
extra_verification	test_case\plr_dpin0005.c	/^static int extra_verification(uchar *buf, struct plr_state *state)$/;"	f	file:
init_pattern_1_2	test_case\plr_dpin0005.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_dpin_0005	test_case\plr_dpin0005.c	/^int initialize_dpin_0005( uchar * buf, uint test_area_start, uint test_area_length )$/;"	f
pattern1_interleaving	test_case\plr_dpin0005.c	/^static int pattern1_interleaving(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
pattern2_sequential	test_case\plr_dpin0005.c	/^static int pattern2_sequential(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
read_dpin_0005	test_case\plr_dpin0005.c	/^int read_dpin_0005(uchar * buf, uint test_area_start, uint test_area_length) $/;"	f
verify_customizing_05	test_case\plr_dpin0005.c	/^static int verify_customizing_05(uchar *buf, uint start_lsn, uint end_lsn, uint expected_loop)$/;"	f	file:
write_dpin_0005	test_case\plr_dpin0005.c	/^int write_dpin_0005(uchar * buf, uint test_area_start, uint test_area_length) $/;"	f
CURRENT_REQUEST	test_case\plr_dpin0006.c	/^enum CURRENT_REQUEST$/;"	g	file:
MAX_REQUEST_SECTORS	test_case\plr_dpin0006.c	42;"	d	file:
SKIP_RANDOM	test_case\plr_dpin0006.c	/^	SKIP_RANDOM = 0,$/;"	e	enum:CURRENT_REQUEST	file:
WRITE_RANDOM	test_case\plr_dpin0006.c	/^	WRITE_RANDOM,$/;"	e	enum:CURRENT_REQUEST	file:
extra_verification	test_case\plr_dpin0006.c	/^static int extra_verification(uchar *buf, struct plr_state *state)$/;"	f	file:
init_pattern_1_2	test_case\plr_dpin0006.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_dpin_0006	test_case\plr_dpin0006.c	/^int initialize_dpin_0006( uchar * buf, uint test_area_start, uint test_area_length )$/;"	f
pattern1_interleaving	test_case\plr_dpin0006.c	/^static int pattern1_interleaving(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
pattern2_sequential	test_case\plr_dpin0006.c	/^static int pattern2_sequential(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
read_dpin_0006	test_case\plr_dpin0006.c	/^int read_dpin_0006(uchar * buf, uint test_area_start, uint test_area_length) $/;"	f
verify_customizing_06	test_case\plr_dpin0006.c	/^static int verify_customizing_06(uchar *buf, uint start_lsn, uint end_lsn, uint expected_loop)$/;"	f	file:
write_dpin_0006	test_case\plr_dpin0006.c	/^int write_dpin_0006(uchar * buf, uint test_area_start, uint test_area_length) $/;"	f
extra_verification	test_case\plr_dpin0007.c	/^static int extra_verification(uchar *buf, struct plr_state *state)$/;"	f	file:
init_pattern_1_2	test_case\plr_dpin0007.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_dpin_0007	test_case\plr_dpin0007.c	/^int initialize_dpin_0007( uchar * buf, uint test_area_start, uint test_area_length )$/;"	f
pattern1_interleaving	test_case\plr_dpin0007.c	/^static int pattern1_interleaving(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
pattern2_sequential	test_case\plr_dpin0007.c	/^static int pattern2_sequential(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
read_dpin_0007	test_case\plr_dpin0007.c	/^int read_dpin_0007(uchar * buf, uint test_area_start, uint test_area_length) $/;"	f
write_dpin_0007	test_case\plr_dpin0007.c	/^int write_dpin_0007(uchar * buf, uint test_area_start, uint test_area_length) $/;"	f
BUFFERS_PER_TEST_AREA	test_case\plr_dpin0008.c	76;"	d	file:
BUFFERS_PER_ZONE	test_case\plr_dpin0008.c	73;"	d	file:
BUFFER_SIZE	test_case\plr_dpin0008.c	58;"	d	file:
BYTES_PER_BUFFER	test_case\plr_dpin0008.c	62;"	d	file:
BYTES_PER_PAGE	test_case\plr_dpin0008.c	69;"	d	file:
BYTES_PER_SECTOR	test_case\plr_dpin0008.c	65;"	d	file:
BYTES_PER_TEST_AREA	test_case\plr_dpin0008.c	64;"	d	file:
CHUNK_SIZE	test_case\plr_dpin0008.c	51;"	d	file:
COMPARE_FIRST_4BYTE_ONLY	test_case\plr_dpin0008.c	106;"	d	file:
INTENDED_CRASH_PAGE	test_case\plr_dpin0008.c	121;"	d	file:
INTENDED_CRASH_WORD	test_case\plr_dpin0008.c	122;"	d	file:
PAGES_PER_BUFFER	test_case\plr_dpin0008.c	77;"	d	file:
PAGES_PER_TEST_AREA	test_case\plr_dpin0008.c	74;"	d	file:
PAGES_PER_ZONE	test_case\plr_dpin0008.c	71;"	d	file:
RD_ERR_INVALID_ZONE_NUMBER	test_case\plr_dpin0008.c	111;"	d	file:
RD_ERR_READ_IO_FAILED	test_case\plr_dpin0008.c	112;"	d	file:
RD_ERR_READ_VERIFY_FAILED	test_case\plr_dpin0008.c	109;"	d	file:
RD_ERR_WRITE_FAILED	test_case\plr_dpin0008.c	110;"	d	file:
RD_MAGIC_NUMBER	test_case\plr_dpin0008.c	115;"	d	file:
RD_MAGIC_NUMBER_INTENSIVE_CRASH	test_case\plr_dpin0008.c	120;"	d	file:
RD_PAGES	test_case\plr_dpin0008.c	101;"	d	file:
RD_PAGES	test_case\plr_dpin0008.c	95;"	d	file:
RD_REPEAT_COUNT	test_case\plr_dpin0008.c	102;"	d	file:
RD_REPEAT_COUNT	test_case\plr_dpin0008.c	96;"	d	file:
SECTORS_PER_BUFFER	test_case\plr_dpin0008.c	67;"	d	file:
SECTORS_PER_PAGE	test_case\plr_dpin0008.c	68;"	d	file:
SECTORS_PER_TEST_AREA	test_case\plr_dpin0008.c	75;"	d	file:
SECTORS_PER_ZONE	test_case\plr_dpin0008.c	72;"	d	file:
SJD_CAUSE_INTENDED_CRASH	test_case\plr_dpin0008.c	97;"	d	file:
WORDS_PER_BUFFER	test_case\plr_dpin0008.c	63;"	d	file:
WORDS_PER_PAGE	test_case\plr_dpin0008.c	70;"	d	file:
WORDS_PER_SECTOR	test_case\plr_dpin0008.c	66;"	d	file:
_rd_crash_info	test_case\plr_dpin0008.c	/^static read_disturb_crash_info_s _rd_crash_info[1];	\/\/ read_disturb_crash_info;$/;"	v	file:
boot_cnt	test_case\plr_dpin0008.c	/^	int					boot_cnt;		\/\/ boot count$/;"	m	struct:read_disturb_crash_info	file:
compare_buffer	test_case\plr_dpin0008.c	/^static int compare_buffer(const u32* buf_ref, u32* buf, int word_len, int* word_pos)$/;"	f	file:
err_code	test_case\plr_dpin0008.c	/^	int					err_code;		\/\/ error code, reserved $/;"	m	struct:read_disturb_crash_info	file:
extra_verification	test_case\plr_dpin0008.c	/^static int extra_verification(uchar *buf, struct plr_state *state)	\/\/ 8 MB read buffer $/;"	f	file:
fill_read_disturb_area	test_case\plr_dpin0008.c	/^static int fill_read_disturb_area( void )$/;"	f	file:
init_pattern_1_2	test_case\plr_dpin0008.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_dpin_0008	test_case\plr_dpin0008.c	/^int initialize_dpin_0008( uchar * buf, uint test_area_start, uint test_area_length )$/;"	f
memory_dump	test_case\plr_dpin0008.c	/^static void memory_dump(u32* p0, int words)$/;"	f	file:
pattern1_interleaving	test_case\plr_dpin0008.c	/^static int pattern1_interleaving(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
pattern2_sequential	test_case\plr_dpin0008.c	/^static int pattern2_sequential(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
prepare_crash_buffer	test_case\plr_dpin0008.c	/^static u32* prepare_crash_buffer(void)$/;"	f	file:
prepare_ref_buffer	test_case\plr_dpin0008.c	/^static u32* prepare_ref_buffer(void)$/;"	f	file:
print_rd_crash_info	test_case\plr_dpin0008.c	/^static void print_rd_crash_info(uchar * buf, struct plr_state * state, struct Unconfirmed_Info * info)$/;"	f	file:
read_disturb_crash_info	test_case\plr_dpin0008.c	/^typedef struct read_disturb_crash_info$/;"	s	file:
read_disturb_crash_info_s	test_case\plr_dpin0008.c	/^}  read_disturb_crash_info_s;$/;"	t	typeref:struct:read_disturb_crash_info	file:
read_disturb_verify	test_case\plr_dpin0008.c	/^static int read_disturb_verify(u32* ref_buf, int *sec_no_in_zone_p )$/;"	f	file:
read_dpin_0008	test_case\plr_dpin0008.c	/^int read_dpin_0008(uchar * buf, uint test_area_start, uint test_area_length) $/;"	f
repeat_no	test_case\plr_dpin0008.c	/^	int 				repeat_no;		\/\/ repeat number in a boot$/;"	m	struct:read_disturb_crash_info	file:
sec_no_in_zone	test_case\plr_dpin0008.c	/^	int 				sec_no_in_zone;	\/\/ sector number in a zone$/;"	m	struct:read_disturb_crash_info	file:
tune_test_area	test_case\plr_dpin0008.c	/^static void tune_test_area(uint* test_area_start, uint* test_area_length)$/;"	f	file:
write_dpin_0008	test_case\plr_dpin0008.c	/^int write_dpin_0008(uchar * buf, uint test_area_start, uint test_area_length) $/;"	f
MAX_REQUEST_SECTORS	test_case\plr_dpin0009_12.c	23;"	d	file:
_writing_sequence	test_case\plr_dpin0009_12.c	/^static bool _writing_sequence  = FALSE;$/;"	v	file:
check_page	test_case\plr_dpin0009_12.c	/^static bool check_page(const void * cs, uint value, size_t count)$/;"	f	file:
init_pattern_1_2	test_case\plr_dpin0009_12.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_dpin_0009_12	test_case\plr_dpin0009_12.c	/^int initialize_dpin_0009_12( uchar * buf, uint test_area_start, uint test_area_length )$/;"	f
pattern_erase	test_case\plr_dpin0009_12.c	/^static int pattern_erase(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
pattern_write	test_case\plr_dpin0009_12.c	/^static int pattern_write(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
print_discard_customizing	test_case\plr_dpin0009_12.c	/^static void print_discard_customizing(uchar *buf, struct plr_state *state, struct Unconfirmed_Info *crash_info)$/;"	f	file:
print_erase_customizing	test_case\plr_dpin0009_12.c	/^static void print_erase_customizing(uchar *buf, struct plr_state *state, struct Unconfirmed_Info *crash_info)$/;"	f	file:
print_sanitize_customizing	test_case\plr_dpin0009_12.c	/^static void print_sanitize_customizing(uchar *buf, struct plr_state *state, struct Unconfirmed_Info *crash_info)$/;"	f	file:
print_trim_customizing	test_case\plr_dpin0009_12.c	/^static void print_trim_customizing(uchar *buf, struct plr_state *state, struct Unconfirmed_Info *crash_info)$/;"	f	file:
read_dpin_0009_12	test_case\plr_dpin0009_12.c	/^int read_dpin_0009_12(uchar * buf, uint test_area_start, uint test_area_length) $/;"	f
verify_normal_customizing	test_case\plr_dpin0009_12.c	/^static int verify_normal_customizing(uchar *buf, uint start_lsn, uint request_sectors, uint request_count, uint next_lsn)$/;"	f	file:
verify_unconfirmed_customizing	test_case\plr_dpin0009_12.c	/^int verify_unconfirmed_customizing(uchar *buf, uint start_lsn, uint request_sectors, uint request_count, uint next_addr)$/;"	f
wrapper_erase_request	test_case\plr_dpin0009_12.c	/^static int wrapper_erase_request(uchar *buf, uint lsn, uint request_sectors, uint request_count, uint next_lsn)$/;"	f	file:
write_dpin_0009_12	test_case\plr_dpin0009_12.c	/^int write_dpin_0009_12(uchar * buf, uint test_area_start, uint test_area_length) $/;"	f
BUFFER_SIZE	test_case\plr_dpin0013.c	45;"	d	file:
BYTES_PER_BUFFER	test_case\plr_dpin0013.c	46;"	d	file:
BYTES_PER_SECTOR	test_case\plr_dpin0013.c	49;"	d	file:
CURRENT_REQUEST	test_case\plr_dpin0013.c	/^enum CURRENT_REQUEST$/;"	g	file:
G_BYTES	test_case\plr_dpin0013.c	43;"	d	file:
K_BYTES	test_case\plr_dpin0013.c	41;"	d	file:
MAX_REQUEST_SECTORS	test_case\plr_dpin0013.c	390;"	d	file:
MIN_REQUEST_SECTORS	test_case\plr_dpin0013.c	389;"	d	file:
M_BYTES	test_case\plr_dpin0013.c	42;"	d	file:
RANDOM_LOOP_CNT	test_case\plr_dpin0013.c	27;"	d	file:
RANDOM_LOOP_CNT	test_case\plr_dpin0013.c	30;"	d	file:
RANDOM_WRITE	test_case\plr_dpin0013.c	23;"	d	file:
RANDOM_WRITE_CNT	test_case\plr_dpin0013.c	24;"	d	file:
RD_ERR_INVALID_ZONE_NUMBER	test_case\plr_dpin0013.c	38;"	d	file:
RD_ERR_READ_IO_FAILED	test_case\plr_dpin0013.c	39;"	d	file:
RD_ERR_READ_VERIFY_FAILED	test_case\plr_dpin0013.c	36;"	d	file:
RD_ERR_WRITE_FAILED	test_case\plr_dpin0013.c	37;"	d	file:
RD_MAGIC_NUMBER	test_case\plr_dpin0013.c	51;"	d	file:
RD_REPEAT_COUNT	test_case\plr_dpin0013.c	187;"	d	file:
SECTORS_PER_BUFFER	test_case\plr_dpin0013.c	50;"	d	file:
SEQ_WRITE	test_case\plr_dpin0013.c	22;"	d	file:
SLEEP_DELAY_MSEC	test_case\plr_dpin0013.c	34;"	d	file:
WORDS_PER_BUFFER	test_case\plr_dpin0013.c	48;"	d	file:
WORDS_PER_SECTOR	test_case\plr_dpin0013.c	47;"	d	file:
WRITE_4K	test_case\plr_dpin0013.c	/^	WRITE_4K,$/;"	e	enum:CURRENT_REQUEST	file:
WRITE_RANDOM	test_case\plr_dpin0013.c	/^	WRITE_RANDOM = 0,$/;"	e	enum:CURRENT_REQUEST	file:
_rd_crash_info	test_case\plr_dpin0013.c	/^static read_disturb_crash_info_s _rd_crash_info[1];	\/\/ read_disturb_crash_info;$/;"	v	file:
boot_cnt	test_case\plr_dpin0013.c	/^	int					boot_cnt;		\/\/ boot count$/;"	m	struct:read_disturb_crash_info	file:
compare_buffer	test_case\plr_dpin0013.c	/^static int compare_buffer(const u64* buf_ref, u64* buf, int word_len, int* word_pos)$/;"	f	file:
err_code	test_case\plr_dpin0013.c	/^	int					err_code;		\/\/ error code, reserved$/;"	m	struct:read_disturb_crash_info	file:
extra_verification	test_case\plr_dpin0013.c	/^static int extra_verification(uchar *buf, struct plr_state *state)$/;"	f	file:
init_pattern_1_2	test_case\plr_dpin0013.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_dpin_0013	test_case\plr_dpin0013.c	/^int initialize_dpin_0013( uchar * buf, uint test_area_start, uint test_area_length )$/;"	f
known_pattern_write	test_case\plr_dpin0013.c	/^static int known_pattern_write()$/;"	f	file:
memory_dump	test_case\plr_dpin0013.c	/^static void memory_dump(u64* p0, int words)$/;"	f	file:
pattern_interleaving	test_case\plr_dpin0013.c	/^static int pattern_interleaving(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
prepare_random_write_buffer	test_case\plr_dpin0013.c	/^static u64* prepare_random_write_buffer(void)$/;"	f	file:
prepare_write_buffer	test_case\plr_dpin0013.c	/^static u64* prepare_write_buffer()$/;"	f	file:
random_write_and_sleep	test_case\plr_dpin0013.c	/^static int random_write_and_sleep(int loop, int delay_msec)$/;"	f	file:
read_disturb_crash_info	test_case\plr_dpin0013.c	/^typedef struct read_disturb_crash_info$/;"	s	file:
read_disturb_crash_info_s	test_case\plr_dpin0013.c	/^}  read_disturb_crash_info_s;$/;"	t	typeref:struct:read_disturb_crash_info	file:
read_dpin_0013	test_case\plr_dpin0013.c	/^int read_dpin_0013( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
read_uecc_verify	test_case\plr_dpin0013.c	/^static int read_uecc_verify(u64* ref_buf, int *sec_no_in_zone_p )$/;"	f	file:
repeat_no	test_case\plr_dpin0013.c	/^	int 				repeat_no;		\/\/ repeat number in a boot$/;"	m	struct:read_disturb_crash_info	file:
sec_no_in_zone	test_case\plr_dpin0013.c	/^	int 				sec_no_in_zone;	\/\/ sector number in a zone$/;"	m	struct:read_disturb_crash_info	file:
sequential_write	test_case\plr_dpin0013.c	/^static void sequential_write()$/;"	f	file:
sleep_and_resume	test_case\plr_dpin0013.c	/^static int sleep_and_resume(uint delay_msec)$/;"	f	file:
uecc_verification	test_case\plr_dpin0013.c	/^static int uecc_verification()	\/\/ 8 MB read buffer$/;"	f	file:
verify_customizing_00	test_case\plr_dpin0013.c	/^static int verify_customizing_00(uchar *buf, uint start_lsn, uint end_lsn, uint expected_loop)$/;"	f	file:
write_buffer	test_case\plr_dpin0013.c	/^static void write_buffer(u32 start_addr, u64* buffer, u8 is_random)$/;"	f	file:
write_dpin_0013	test_case\plr_dpin0013.c	/^int write_dpin_0013( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
ADDITIONAL_DAYS_PER_1K	test_case\plr_dpin0014.c	30;"	d	file:
BUFFER_SIZE	test_case\plr_dpin0014.c	53;"	d	file:
BYTES_PER_BUFFER	test_case\plr_dpin0014.c	54;"	d	file:
BYTES_PER_SECTOR	test_case\plr_dpin0014.c	57;"	d	file:
CURRENT_REQUEST	test_case\plr_dpin0014.c	/^enum CURRENT_REQUEST$/;"	g	file:
G_BYTES	test_case\plr_dpin0014.c	51;"	d	file:
K_BYTES	test_case\plr_dpin0014.c	49;"	d	file:
MAX_REQUEST_SECTORS	test_case\plr_dpin0014.c	554;"	d	file:
MIN_REQUEST_SECTORS	test_case\plr_dpin0014.c	553;"	d	file:
M_BYTES	test_case\plr_dpin0014.c	50;"	d	file:
PE_CYCLE	test_case\plr_dpin0014.c	29;"	d	file:
RANDOM_LOOP_CNT	test_case\plr_dpin0014.c	35;"	d	file:
RANDOM_LOOP_CNT	test_case\plr_dpin0014.c	38;"	d	file:
RANDOM_WRITE	test_case\plr_dpin0014.c	24;"	d	file:
RANDOM_WRITE_CNT	test_case\plr_dpin0014.c	25;"	d	file:
RD_ERR_INVALID_ZONE_NUMBER	test_case\plr_dpin0014.c	46;"	d	file:
RD_ERR_READ_IO_FAILED	test_case\plr_dpin0014.c	47;"	d	file:
RD_ERR_READ_VERIFY_FAILED	test_case\plr_dpin0014.c	44;"	d	file:
RD_ERR_WRITE_FAILED	test_case\plr_dpin0014.c	45;"	d	file:
RD_MAGIC_NUMBER	test_case\plr_dpin0014.c	59;"	d	file:
RD_REPEAT_COUNT	test_case\plr_dpin0014.c	362;"	d	file:
SECTORS_PER_BUFFER	test_case\plr_dpin0014.c	58;"	d	file:
SEQ_WRITE	test_case\plr_dpin0014.c	23;"	d	file:
SLEEP_DELAY_MSEC	test_case\plr_dpin0014.c	42;"	d	file:
WORDS_PER_BUFFER	test_case\plr_dpin0014.c	56;"	d	file:
WORDS_PER_SECTOR	test_case\plr_dpin0014.c	55;"	d	file:
WRITE_4K	test_case\plr_dpin0014.c	/^	WRITE_4K,$/;"	e	enum:CURRENT_REQUEST	file:
WRITE_RANDOM	test_case\plr_dpin0014.c	/^	WRITE_RANDOM = 0,$/;"	e	enum:CURRENT_REQUEST	file:
_rd_crash_info	test_case\plr_dpin0014.c	/^static read_disturb_crash_info_s _rd_crash_info[1];	\/\/ read_disturb_crash_info;$/;"	v	file:
boot_cnt	test_case\plr_dpin0014.c	/^	int					boot_cnt;		\/\/ boot count$/;"	m	struct:read_disturb_crash_info	file:
compare_buffer	test_case\plr_dpin0014.c	/^static int compare_buffer(const u64* buf_ref, u64* buf, int word_len, int* word_pos)$/;"	f	file:
err_code	test_case\plr_dpin0014.c	/^	int					err_code;		\/\/ error code, reserved$/;"	m	struct:read_disturb_crash_info	file:
extra_verification	test_case\plr_dpin0014.c	/^static int extra_verification(uchar *buf, struct plr_state *state)$/;"	f	file:
fill_read_disturb_area	test_case\plr_dpin0014.c	/^static int fill_read_disturb_area( void )$/;"	f	file:
init_pattern_1_2	test_case\plr_dpin0014.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_dpin_0014	test_case\plr_dpin0014.c	/^int initialize_dpin_0014( uchar * buf, uint test_area_start, uint test_area_length )$/;"	f
known_pattern_write	test_case\plr_dpin0014.c	/^static int known_pattern_write()$/;"	f	file:
memory_dump	test_case\plr_dpin0014.c	/^static void memory_dump(u64* p0, int words)$/;"	f	file:
pattern_interleaving	test_case\plr_dpin0014.c	/^static int pattern_interleaving(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
prepare_crash_buffer	test_case\plr_dpin0014.c	/^static u32* prepare_crash_buffer(void)$/;"	f	file:
prepare_random_ref_buffer	test_case\plr_dpin0014.c	/^static u64* prepare_random_ref_buffer(void)$/;"	f	file:
prepare_random_write_buffer	test_case\plr_dpin0014.c	/^static u64* prepare_random_write_buffer(void)$/;"	f	file:
prepare_ref_buffer	test_case\plr_dpin0014.c	/^static u64* prepare_ref_buffer(void)$/;"	f	file:
prepare_write_buffer	test_case\plr_dpin0014.c	/^static u64* prepare_write_buffer()$/;"	f	file:
random_write_and_sleep	test_case\plr_dpin0014.c	/^static int random_write_and_sleep(int loop, int delay_msec)$/;"	f	file:
read_disturb_crash_info	test_case\plr_dpin0014.c	/^typedef struct read_disturb_crash_info$/;"	s	file:
read_disturb_crash_info_s	test_case\plr_dpin0014.c	/^}  read_disturb_crash_info_s;$/;"	t	typeref:struct:read_disturb_crash_info	file:
read_dpin_0014	test_case\plr_dpin0014.c	/^int read_dpin_0014( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
read_uecc_verify	test_case\plr_dpin0014.c	/^static int read_uecc_verify(u64* ref_buf, int *sec_no_in_zone_p )$/;"	f	file:
repeat_no	test_case\plr_dpin0014.c	/^	int 				repeat_no;		\/\/ repeat number in a boot$/;"	m	struct:read_disturb_crash_info	file:
sec_no_in_zone	test_case\plr_dpin0014.c	/^	int 				sec_no_in_zone;	\/\/ sector number in a zone$/;"	m	struct:read_disturb_crash_info	file:
sequential_write	test_case\plr_dpin0014.c	/^static void sequential_write()$/;"	f	file:
sleep_and_resume	test_case\plr_dpin0014.c	/^static int sleep_and_resume(uint delay_msec)$/;"	f	file:
uecc_verification	test_case\plr_dpin0014.c	/^static int uecc_verification()	\/\/ 8 MB read buffer$/;"	f	file:
verify_customizing_00	test_case\plr_dpin0014.c	/^static int verify_customizing_00(uchar *buf, uint start_lsn, uint end_lsn, uint expected_loop)$/;"	f	file:
write_buffer	test_case\plr_dpin0014.c	/^static void write_buffer(u32 start_addr, u64* buffer, u8 is_random)$/;"	f	file:
write_dpin_0014	test_case\plr_dpin0014.c	/^int write_dpin_0014( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
BUFFER_SIZE	test_case\plr_dpin0015.c	46;"	d	file:
BYTES_PER_BUFFER	test_case\plr_dpin0015.c	47;"	d	file:
BYTES_PER_SECTOR	test_case\plr_dpin0015.c	50;"	d	file:
CURRENT_REQUEST	test_case\plr_dpin0015.c	/^enum CURRENT_REQUEST$/;"	g	file:
G_BYTES	test_case\plr_dpin0015.c	44;"	d	file:
K_BYTES	test_case\plr_dpin0015.c	42;"	d	file:
MAX_REQUEST_SECTORS	test_case\plr_dpin0015.c	388;"	d	file:
MIN_REQUEST_SECTORS	test_case\plr_dpin0015.c	387;"	d	file:
M_BYTES	test_case\plr_dpin0015.c	43;"	d	file:
RANDOM_LOOP_CNT	test_case\plr_dpin0015.c	28;"	d	file:
RANDOM_LOOP_CNT	test_case\plr_dpin0015.c	31;"	d	file:
RANDOM_WRITE	test_case\plr_dpin0015.c	24;"	d	file:
RANDOM_WRITE_CNT	test_case\plr_dpin0015.c	25;"	d	file:
RD_ERR_INVALID_ZONE_NUMBER	test_case\plr_dpin0015.c	39;"	d	file:
RD_ERR_READ_IO_FAILED	test_case\plr_dpin0015.c	40;"	d	file:
RD_ERR_READ_VERIFY_FAILED	test_case\plr_dpin0015.c	37;"	d	file:
RD_ERR_WRITE_FAILED	test_case\plr_dpin0015.c	38;"	d	file:
RD_MAGIC_NUMBER	test_case\plr_dpin0015.c	52;"	d	file:
RD_REPEAT_COUNT	test_case\plr_dpin0015.c	200;"	d	file:
SECTORS_PER_BUFFER	test_case\plr_dpin0015.c	51;"	d	file:
SEQ_WRITE	test_case\plr_dpin0015.c	23;"	d	file:
SLEEP_DELAY_MSEC	test_case\plr_dpin0015.c	35;"	d	file:
WORDS_PER_BUFFER	test_case\plr_dpin0015.c	49;"	d	file:
WORDS_PER_SECTOR	test_case\plr_dpin0015.c	48;"	d	file:
WRITE_4K	test_case\plr_dpin0015.c	/^	WRITE_4K,$/;"	e	enum:CURRENT_REQUEST	file:
WRITE_RANDOM	test_case\plr_dpin0015.c	/^	WRITE_RANDOM = 0,$/;"	e	enum:CURRENT_REQUEST	file:
_rd_crash_info	test_case\plr_dpin0015.c	/^static read_disturb_crash_info_s _rd_crash_info[1];	\/\/ read_disturb_crash_info;$/;"	v	file:
boot_cnt	test_case\plr_dpin0015.c	/^	int					boot_cnt;		\/\/ boot count$/;"	m	struct:read_disturb_crash_info	file:
compare_buffer	test_case\plr_dpin0015.c	/^static int compare_buffer(const u64* buf_ref, u64* buf, int word_len, int* word_pos)$/;"	f	file:
err_code	test_case\plr_dpin0015.c	/^	int					err_code;		\/\/ error code, reserved$/;"	m	struct:read_disturb_crash_info	file:
extra_verification	test_case\plr_dpin0015.c	/^static int extra_verification(uchar *buf, struct plr_state *state)$/;"	f	file:
init_pattern_1_2	test_case\plr_dpin0015.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_dpin_0015	test_case\plr_dpin0015.c	/^int initialize_dpin_0015( uchar * buf, uint test_area_start, uint test_area_length )$/;"	f
known_pattern_write	test_case\plr_dpin0015.c	/^static int known_pattern_write()$/;"	f	file:
memory_dump	test_case\plr_dpin0015.c	/^static void memory_dump(u64* p0, int words)$/;"	f	file:
pattern_interleaving	test_case\plr_dpin0015.c	/^static int pattern_interleaving(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
prepare_random_write_buffer	test_case\plr_dpin0015.c	/^static u64* prepare_random_write_buffer(void)$/;"	f	file:
prepare_write_buffer	test_case\plr_dpin0015.c	/^static u64* prepare_write_buffer()$/;"	f	file:
random_write_and_sleep	test_case\plr_dpin0015.c	/^static int random_write_and_sleep(int loop, int delay_msec)$/;"	f	file:
read_disturb_crash_info	test_case\plr_dpin0015.c	/^typedef struct read_disturb_crash_info$/;"	s	file:
read_disturb_crash_info_s	test_case\plr_dpin0015.c	/^}  read_disturb_crash_info_s;$/;"	t	typeref:struct:read_disturb_crash_info	file:
read_dpin_0015	test_case\plr_dpin0015.c	/^int read_dpin_0015( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
read_uecc_verify	test_case\plr_dpin0015.c	/^static int read_uecc_verify(u64* ref_buf, int *sec_no_in_zone_p )$/;"	f	file:
repeat_no	test_case\plr_dpin0015.c	/^	int 				repeat_no;		\/\/ repeat number in a boot$/;"	m	struct:read_disturb_crash_info	file:
sec_no_in_zone	test_case\plr_dpin0015.c	/^	int 				sec_no_in_zone;	\/\/ sector number in a zone$/;"	m	struct:read_disturb_crash_info	file:
sequential_write	test_case\plr_dpin0015.c	/^static void sequential_write()$/;"	f	file:
sleep_and_resume	test_case\plr_dpin0015.c	/^static int sleep_and_resume(uint delay_msec)$/;"	f	file:
sleep_and_wakeup	test_case\plr_dpin0015.c	/^static int sleep_and_wakeup(int loop, int delay_msec)$/;"	f	file:
uecc_verification	test_case\plr_dpin0015.c	/^static int uecc_verification()	\/\/ 8 MB read buffer$/;"	f	file:
verify_customizing_00	test_case\plr_dpin0015.c	/^static int verify_customizing_00(uchar *buf, uint start_lsn, uint end_lsn, uint expected_loop)$/;"	f	file:
write_buffer	test_case\plr_dpin0015.c	/^static void write_buffer(u32 start_addr, u64* buffer, u8 is_random)$/;"	f	file:
write_dpin_0015	test_case\plr_dpin0015.c	/^int write_dpin_0015( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
_end_time	test_case\plr_saxx0000.c	/^static uint _end_time = 0;$/;"	v	file:
_start_time	test_case\plr_saxx0000.c	/^static uint _start_time = 0;$/;"	v	file:
_total_writing_page	test_case\plr_saxx0000.c	/^static unsigned long long _total_writing_page = 0;$/;"	v	file:
_total_writing_time	test_case\plr_saxx0000.c	/^static unsigned long long _total_writing_time = 0;$/;"	v	file:
_writing_sequence	test_case\plr_saxx0000.c	/^static bool _writing_sequence = TRUE;$/;"	v	file:
get_request_length	test_case\plr_saxx0000.c	/^static uint get_request_length(void)$/;"	f	file:
get_skip_length	test_case\plr_saxx0000.c	/^static uint get_skip_length(void) $/;"	f	file:
init_pattern_1_2	test_case\plr_saxx0000.c	/^static void init_pattern_1_2(struct plr_write_info* t_info)$/;"	f	file:
initialize_saxx_0000	test_case\plr_saxx0000.c	/^int initialize_saxx_0000( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
pattern	test_case\plr_saxx0000.c	/^static int pattern(uchar *buf, uint start_lsn, uint request_sectors, op_pattern operate)$/;"	f	file:
print_daxx_0000	test_case\plr_saxx0000.c	/^static void print_daxx_0000(void)$/;"	f	file:
print_statistics	test_case\plr_saxx0000.c	/^static void print_statistics(void)$/;"	f	file:
read_saxx_0000	test_case\plr_saxx0000.c	/^int read_saxx_0000( uchar * buf, uint test_start_sector, uint test_sector_length)$/;"	f
write_saxx_0000	test_case\plr_saxx0000.c	/^int write_saxx_0000( uchar * buf, uint test_start_sector, uint test_sector_length )$/;"	f
main	tr.c	/^int main(int argc, char *argv[])$/;"	f
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
